
#define  WAIT_FOR_HARDWARE_CYCLE 30
#define STEP_INST_MAX_CYCLE 4096
	//------------------------------------------------------
	//for debugger use:
public:

//for jtag internal use:
	unsigned int cycleStopRsn;
	bool bDSPEnable;//true表示使能，false表示禁止。
	bool bRunFirstCycle;
	bool bDSPRunning;//true表示DSP正在运行，false表示DSP已经停止。
	bool bStepCycle;//周期单步。true表示使能周期单步，false表示禁止周期单步。
	unsigned int CycleCnt;//周期单步数目。
	unsigned int CyclePassed;//已经走过的周期单步数目
	bool bStepInst;//指令单步。true表示使能指令单步，false表示禁止指令单步。
	unsigned int InstCnt;//指令单步数目。
	unsigned int InstPassed;//已经走过的指令单步数目
	unsigned int lastPC;
	unsigned int iFirstCycleWaitForHardware;
	unsigned int StepInstCycles;


	IOHostServer *ioserver;

	/*
每个bit位置位表示一个调试事件：
Bit0表示周期单步结束；
Bit1表示指令单步结束；
Bit2表示断点触发；
Bit3表示观察点触发；
Bit4表示停止命令；
Bit5表示异常发生；
	*/
	unsigned int StopReason;//停止原因。

	//设置JTAG寄存器
	void InitJtagRegister();



//以上变量为JTAG内部需要，内核无需关心

	//以下为内核提供给JTAG使用的接口：









	//以下为内核提供给JTAG使用的接口：






	//是否遇到断点，true表示遇到，false表示未遇到
	/******************************************************
	*功能：判断断点是否触发
	*参数：无
	*
	*返回值：true表示触发，false表示未触发
	*******************************************************/
	bool IsBPHit();


	/******************************************************
	*功能：观察点触发信息。
	*观察点触发信息。一共32个观察点，记为0，1，2，。。。31
	*若第0个观察点触发，WPTriggerReg第0位记为1，否则记为0
	*若第1个观察点触发，WPTriggerReg第1位记为1，否则记为0
	*。。。
	*若全为0，表示没有观察点触发。
	*硬件只需要提供哪个观察点被触发的信息，无需提供具体什么地址被触发的信息。
	*参数：无
	*
	*返回值：观察点触发信息
	*******************************************************/
	unsigned int GetWPTriggerReg();                                              

	//当前程序地址，无论是否触发断点，内核每运行一步，都要更新PC值。
	/******************************************************
	*功能：得到当前程序地址，无论是否触发断点，内核每运行一步，都要更新PC值。
	*参数：无
	*
	*返回值：当前程序地址
	*******************************************************/
	unsigned int GetPC();


	//得到核的ID
	/******************************************************
	*功能：得到核的ID
	*参数：无
	*
	*返回值：16位的核ID
	*******************************************************/
	unsigned short GetID();

	//单核复位
	/******************************************************
	*功能：单核复位
	*参数：无
	*
	*返回值：无
	*******************************************************/
	void Reset();

	//读寄存器
	/******************************************************
	*功能：读寄存器
	*参数：p_u32Addr:			读出的值的地址
	*	   	p_pValue:			读出的值存放的地址
	*
	*返回值：读寄存器是否成功，成功返回true，失败返回false。
	*******************************************************/
	//bool ReadReg(DSPU32 p_u32Addr,DSPU32 *p_pValue);

	//写寄存器
	/******************************************************
	*功能：写寄存器
	*参数：p_u32Addr:			要写入的地址
	*	   	p_u32Value:			要写入的值
	*
	*返回值：写寄存器是否成功，成功返回true，失败返回false。
	*******************************************************/
	//bool WriteReg(DSPU32 p_u32Addr, DSPU32 p_Value);

	//读存储器
	/******************************************************
	*功能：读存储器
	*参数：p_u32Addr:			读出的值的地址
	*	   	p_pValue:			读出的值存放的地址
	*
	*返回值：读存储器是否成功，成功返回true，失败返回false。
	*******************************************************/
	bool ReadMem(DSPU32 p_u32Addr, DSPU32 *p_pValue);

	//写存储器
	/******************************************************
	*功能：写存储器
	*参数：p_u32Addr:			要写入的地址
	*	   	p_u32Value:			要写入的值
	*
	*返回值：写存储器是否成功，成功返回true，失败返回false。
	*******************************************************/
	bool WriteMem(DSPU32 p_u32Addr, DSPU32 p_u32Value);

	//设置断点
	/******************************************************
	*功能：设置一个新断点
	*参数：p_u32Addr:			断点地址
	*	   	p_u32NeglectCnt:	一次核连续运行过程中的断点忽略记数                              
	*
	*返回值：插入断点是否成功，成功返回true，失败返回false。
	*******************************************************/
	bool InsertBreakpoint(DSPU32 p_u32Addr, DSPU32 p_u32NeglectCnt);

	//清除所有断点
	/******************************************************                
	*功能：清除所有断点。调试器在每次连续运行之前都会重新设置所有断点，设置之后，在运行过程中不再改变。
	*		所以，无需清除某个特定断点的接口。
	*参数：无
	*
	*返回值：清除断点是否成功，成功返回true，失败返回false。
	*******************************************************/
	void ClearBreakpoint();

	//设置观察点
	/******************************************************                   
	*功能：设置观察点
	*参数：p_u32StartAdr：		观察点开始地址                                  
	*		p_u32EndAdr：		观察点结束地址
	*		NegCnt：			一次连续运行过程中的观察点忽略记数                                          
	*		acc：				观察点属性：1：读；
	*										2：写；
	*										3：读写。
	*返回值：插入观察点是否成功，成功返回true，失败返回false。
	*******************************************************/
	bool InsertWatchpoint(DSPU32 p_u32StartAdr,DSPU32 p_u32EndAdr, DSPU32 NegCnt, DSPU8 acc);

	//清除所有观察点
	/******************************************************                      
	*功能：清除所有观察点。调试器在每次连续运行之前都会重新设置所有观察点，设置之后，在运行过程中不再改变。
	*		所以，无需清除某个特定观察点的接口。
	*参数：无
	*
	*返回值：清除观察点是否成功，成功返回true，失败返回false。
	*******************************************************/
	void ClearWatchpoint();

	/*
	* 设置ICACHE起始PC
	*/
	void SetStartPC(DSPU32 u32PC);
////////////////////////////////////////////////////////////////