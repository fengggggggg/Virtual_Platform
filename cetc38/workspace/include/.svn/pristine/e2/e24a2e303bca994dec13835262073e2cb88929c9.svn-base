/*************************************************
  Copyright (C), 
  File name:      CSHF.h
  Author:       Version: 
                Date: 
  Description:    // 用于详细说明此程序文件完成的主要功能，与其他模块
                  // 或函数的接口，输出值、取值范围、含义及参数间的控
                  // 制、顺序、独立或依赖等关系
  Others:         // 其它内容的说明
  Function List:  // 主要函数列表，每条记录应包括函数名及功能简要说明
    1. ....
  History:        // 修改历史记录列表，每条修改记录应包括修改日期、修改
                  // 者及修改内容简述
                    
    1. Date:	2007-8-6
       Author:	GRui
       Modification: add Pass32(), SetExp(), PassBits(), ExtractExp(),
       				 	 ExtractMant()	
       				
	2. Date:	2007-9-3
       Author:	GRui
       Modification: add LXOR64(), RXOR64()
       
	3. Date:	2007-9-30
       Author:	Zhuxz 
       Modification: add fext(), fextz() fexts()      
       
    4. Date:	2008-4-7
       Author:	Zhaoxiang 
       Modification: ExtractExp()
    
    5. Date:	2008-6-24
       Author:	Zhaoxiang 
       Modification: add CompactC32()  
         
    6. Date:	2008-8-4
       Author:	Zhaoxiang 
       Modification: fextz() fexts() (delete a parameter p_u32Rs)
       
    7. Date:	2012-7-18 
       Author:	GRui
       modify： 
       
       Added:   在BWDSP1042标签下新增系列函数(49个)。
    
    8.
       Date:	2012-8-10 
       Author:	GRui
               
       删除：  1042标签下凡是没有标注"found"的函数待确认后均可能被删除（约7条）。
               另删除 SXORTo32()
       
       新增：   SXOR32To32(),RegToSACC(),SXOR16To32(),SACCToReg(),AShift64SACC(),LShift64SACC(),Rot64SACC(),Fext64ToGPR()
       
       修改参数：
                         
       修改函数说明：JLH_32(),JLH_D16(),JLH_Q8(),Vmin2L(),Vmin2H(),Vmin3(),RShift32_SC(),LShift32_SC(),RShiftD16_SC(),LShiftD16_SC(),
                     SACCXor32(),SACCXor16(), INV32(),INVD16(),Fext32ToSACC()
       
       注：TAB相关的函数接口先不要实现，待方案确认。
       
    9.
       Date:	2012-8-23 
       Author:	GRui            
       
       新增：   SigmaSR(), SigmaBR(), SigmaQRHH(), SigmaQRLH(), TABToReg(), TABToHReg(), TABToOReg(), RegToTAB(), HRegToTAB(), ORegToTAB(), 
                OTABAccConst()
       
       修改参数：ABS2SACC(), Fext32ToGPR(), Fext64ToGPR()
                       
     10.
       Date:	2012-9-12
       Author:	GRui
       
       从CALU.h移动以下函数的定义到CSHF.h，以下函数在BWDSP100中均已实现: 
       CountZero32(), CountZeroD16(), CountOne32(), CountOneD16(), OnePosi32(), OnePosiD16(), And32(), Or32(),
       NAnd32(), NOr32(), Xor32(), Not32(), Float16(), Abs32(), AbsD16(), AbsFlo32(), PermuteCFix16(), ConjCFix16(),
       Float32(), Fix32()。 
       
     11.
       Date:	2013-1-1 
       Author:	GRui            
       
       新增：   Flo64ToFix32(), Fix32ToFlo64(), BitAbs2k(), BitAbs3k(), SaccXorReg(), SaccHXorReg()
     
     12.
     	 Date:	2013-3-5 
       Author:	zhaoxiang            
       
       新增：   SHF_Add_Sub32(), SHF_Add_SubD16(), SHF_Add_SubC32(), SHF_Add_SubConjC32()
       					Add32SHF(), Sub32SHF(), AddD16SHF(), SubD16SHF(), Add32HalfSHF(), Sub32HalfSHF(),
       					AddD16HalfSHF(), SubD16HalfSHF(), AddD16CJSHF(), SubD16CJSHF(), AddD16HalfCJSHF(),
       					SubD16HalfCJSHF()
       					
     13.
     	 Date:	2013-3-6 
       Author:	zhaoxiang            
       
       新增：  	ExpandC16(), FloatC16(), FixC32(), FloatC32()
     
     14.
       Date:	2013-3-22 
       Author:	zhaoxiang            
       
       修改参数：  	Flo64ToFix32()和Fix32ToFlo64()中新增参数p_u32Adjust
     
     15.
     	 Date:	2013-4-3 
       Author:	zhaoxiang            
       
       新增：  	AShiftC32()
     
     16
     	 Date:	2013-4-7 
       Author:	zhaoxiang            
       
       修改：SigmaSR(), SigmaBR(), SigmaQRHH(), SigmaQRLH()参数及注释
       
     17
     	 Date:	2013-4-8 
       Author:	zhaoxiang            
       
       修改：TABToOReg()参数、注释、返回值
       			 SXOR32To32(),SXOR16To32(),SHF_SStar(),SHF_SAt(),Vmin2L(),Vmin2H(),Vmin3()参数
       			 
     18
     	 Date:	2013-4-19 
       Author:	zhaoxiang            
       
       修改：		 
       			 AShift64SACC(),LShift64SACC(),Rot64SACC()参数、注释
       		
     19
     	 Date:	2013-4-22 
       Author:	zhaoxiang	 
       新增：
             DWordsFext11(),DWordsIFext11(),DWordsFext21(),DWordsIFext21(),DWordsFext22(),DWordsIFext22(),
             DWordsExtr11(),DWordsIExtr11(),DWordsExtr21(),DWordsIExtr21(),DWordsExtr22(),DWordsIExtr22()
     
     20
     	 Date:	2013-4-22 
       Author:	zhaoxiang	 
       删除：
             DWordsFext11(),DWordsIFext11(),DWordsFext21(),DWordsIFext21(),DWordsFext22(),DWordsIFext22(),
             DWordsExtr11(),DWordsIExtr11(),DWordsExtr21(),DWordsIExtr21(),DWordsExtr22(),DWordsIExtr22()
       			 Spell_21(),ISpell_21(),Spell_22(),ISpell_22()
       修改：
       			 Spell_11()改为Fext_11(),实现功能不变，修改了注释和参数
       			 ISpell_11()改为IFext_11(),实现功能不变，修改了注释和参数
       			 Extr_22(),IExtr_22()，实现功能不变，修改了注释和参数
       			 Extr_11(),IExtr_11(),Extr_21(),IExtr_21(),实现功能有变化，修改了注释和参数
       新增：
             Fext_21()，IFext_21()，Fext_22()，IFext_22()
     21
     	 Date:	2013-4-23 
       Author:	zhaoxiang	
     	 新增：
     	       Mask()的注释					
     22
     	 Date:	2013-4-23 
       Author:	zhaoxiang
       修改：
           	SHF_Add_SubD16(), SHF_Add_Sub32(), SHF_Add_SubC32(), SHF_Add_SubConjC32(),ExpandC16(),
           	FloatC16(),FixC32(),FloatC32(),AShiftC32()参数
     23
     	 Date:	2013-4-26 
       Author:	zhaoxiang	 
       
       修改：
       			 Fext_11(),IFext_11(), Fext_21()，IFext_21()，Fext_22()，IFext_22(),
       			 Extr_11(),IExtr_11(), Extr_21(), IExtr_21(), Extr_22(), IExtr_22()注释
     
     24
     	 Date:	2013-5-3 
       Author:	zhaoxiang	 
       
       新增：		 
       			Compact16To8()，Expand8To16()
     25
     	 Date:	2013-5-10 
       Author:	zhaoxiang	 
       
       修改：
       			JLH_32(),JLH_D16(),JLH_Q8()，SHF_SAt(),SHF_SStar()增加参数：伽罗华系数。  			
     26
     	 Date:	2013-5-30 
       Author:	zhaoxiang	 
       
       新增：  			
       			CompactDW16to8()，ExpandDW8To16()
     
     27
     	 Date:	2013-6-20 
       Author:	zhaoxiang	 
       
       修改：		 
       			Compact16To8()，Expand8To16()的指令注释
		 28
     	 Date:	2013-10-21 
       Author:	zhaoxiang	 
       
       新增：
						AddQ8SHF(), SubQ8SHF()
		
		 29
     	 Date:	2013-10-22 
       Author:	zhaoxiang	 
       
       新增：
						Exchang(), SExchang(), InsertReg(), ExtReg()
			 删除：
			 			Fext_11(),Fext_21(),Fext_22(),Extr_11(),Extr_21(),Extr_22(),
						IFext_11(),IFext_21(),IFext_22(),IExtr_11(),IExtr_21(),IExtr_22()
						
		 30
     	 Date:	2013-11-18 
       Author:	zhaoxiang	 
       
       修改：Flo64ToFix32(),Fix32ToFlo64()参数说明
			 新增：Flo64ToFix64(),Fix64ToFlo64()
			 
		 31
     	 Date:	2014-1-16 
       Author:	zhaoxiang
			 新增：UnsignFix32ToFlo32()
			 
		 32
     	 Date:	2014-2-18 
       Author:	zhaoxiang	 
       
       修改：OTABAccConst()参数

		 33
     	 Date:	2014-2-25 
       Author:	zhaoxiang
		 新增： ArShift32(),Rrot32(),Rrot32()

		 34
		 Date:	2014-8-6 
		 Author:	zhaoxiang	 

		 修改：	 InsertReg()参数


		 35
		 Date:	2014-12-15 
		 Author:	zhaoxiang
		 新增：AddOReg(),AddD16Reg(),Expand16To32(),SACCAddReg32(),SACCAddReg16(),SACCAddReg8(),STabAddReg();
		 
		 36
		 Date:	2014-12-29 
		 Author:	zhaoxiang
		 删除：AddOReg(),AddD16Reg()


		 35
		 Date:	2015-9-18 
		 Author:	zhaoxiang
		 新增： STabRdAddrSet(),STabRdWtAddrSet
             
***********************************************************/

//---------------------------------------------------------------------------
#ifndef Unit_CSHF_H
#define Unit_CSHF_H

//---------------------------------------------------------------------------
#include "dsptypes.h"

//--------------------------------------------------------------------------- 

/******************************************************************
	函数名：		AShift32

	描述:			32位定点数算术移位(右移需做符号扩展)。

	参数:			p_u32Src -- 待移位定点数。
					p_u32BitToShift -- 移动位数，有符号数的补码形式，
									   正表示左移，负表示右移。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 AShift32(DSPU32 p_u32Src, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		ArShift32

	描述:			32位算术移位：将寄存器Rm操作数算术移位

	参数:			p_u32Src -- 待移位定点数。
					p_u32BitToShift -- 移动位数，有符号数的补码形式，
									   正表示左移，负表示右移。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 ArShift32(DSPU32 p_u32Src, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		LShift32

	描述:			32位定点数逻辑移位(右移不做符号扩展)。

	参数:			p_u32Src -- 待移位定点数。
					p_u32BitToShift -- 移动位数，有符号数的补码形式，
									   正表示左移，负表示右移。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 LShift32(DSPU32 p_u32Src, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		Rot32

	描述:			32位定点数循环移位。

	参数:			p_u32Src -- 待移位定点数。
					p_u32BitToShift -- 移动位数，有符号数的补码形式，
									   正表示左移，负表示右移。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Rot32(DSPU32 p_u32Src, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		AShiftD16

	描述:			高低16位定点数算术移位(右移需做符号扩展)。

	参数:			p_u32Src -- 待移位定点数，包括高低16位定点数据。
					p_u32BitToShift -- 移动位数，有符号数的补码形式，
									   正表示左移，负表示右移。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 AShiftD16(DSPU32 p_u32Src, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		LShift32Fill1

	描述:			32位定点数逻辑移位(右移不做符号扩展)，
					移位后空出的位补上1。

	参数:			p_u32Src -- 待移位定点数。
					p_u32BitToShift -- 移动位数，有符号数的补码形式，
									   正表示左移，负表示右移。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 LShift32Fill1(DSPU32 p_u32Src, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		Expand16

	描述:			16位定点数扩展为32位定点数。

	参数:			p_u16Src -- 待扩展16位定点数。
					p_u32Pos -- 表示待扩展的16位数据在32位目的寄存器Rs中所处的位置，
								数据大于16则按照16处理。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位；
					是否做符号位扩展由p_u32SHFCR决定。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Expand16(DSPU16 p_u16Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		Compact32

	描述:			32位定点数压缩为16位定点数。

	参数:			p_u32Src -- 待压缩定点数据。
					p_u32Pos -- 压缩后的16位数据来自32位源操作数中的哪个位段，
								数据大于16则按照16处理。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU16 Compact32(DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		BitClr

	描述:			将32位定点数中的某一位清零。

	参数:			p_u32Src -- 源操作数。
					p_u32Pos -- 要清零的位置。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 BitClr(DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		BitClrAll

	描述:			将32位定点数中的所有位清零。

	参数:			p_u32Src -- 源操作数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 BitClrAll(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		BitSet

	描述:			将32位定点数中的某一位置1。

	参数:			p_u32Src -- 源操作数。
					p_u32Pos -- 要置1的位置。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 BitSet(DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		BitSetAll

	描述:			将32位定点数中的所有位置1。

	参数:			p_u32Src -- 源操作数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 BitSetAll(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		BitInv

	描述:			将32位定点数中的某一位取反。

	参数:			p_u32Src -- 源操作数。
					p_u32Pos -- 要取反的位置。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 BitInv(DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		BitInvAll

	描述:			将32位定点数中的所有位取反。

	参数:			p_u32Src -- 源操作数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 BitInvAll(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		Mask
	
  对应指令形式：Rs=Rm mask C

	描述:			数据屏蔽,按32位立即数中的“1”的位置，确定Rs寄存器对应位是否被Rm位所取代。
	          本指令的含义是，如果32位立即数中的第x位为1，那么就用源寄存器Rm的第x位来取代目的寄存器Rs的第x位。
						详见指令集20130402。
						
	参数:			p_u32Src -- 源操作数Rm。
						p_u32Rs -- 目的寄存器Rs。
					p_u32Mask -- 位置掩码C。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Mask(DSPU32 p_u32Src, DSPU32 p_u32Rs, DSPU32 p_u32Mask, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		MaskClr

	描述:			数据屏蔽清零。本指令的含义是，如果p_u32Mask中的第x位为1，
					那么就将p_u32Src的第x位清零，并将结果返回。

	参数:			p_u32Src -- 源操作数。
					p_u32Mask -- 位置掩码。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 MaskClr(DSPU32 p_u32Src, DSPU32 p_u32Mask, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		MaskSet

	描述:			数据屏蔽置1。本指令的含义是，如果p_u32Mask中的第x位为1，
					那么就将p_u32Src的第x位置1，并将结果返回。

	参数:			p_u32Src -- 源操作数。
					p_u32Mask -- 位置掩码。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 MaskSet(DSPU32 p_u32Src, DSPU32 p_u32Mask, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		MaskInv

	描述:			数据屏蔽取反。本指令的含义是，如果p_u32Mask中的第x位为1，
					那么就将p_u32Src的第x位取反，并将结果返回。

	参数:			p_u32Src -- 源操作数。
					p_u32Mask -- 位置掩码。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 MaskInv(DSPU32 p_u32Src, DSPU32 p_u32Mask, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		LXOR

	描述:			p_u32Src本身的若干位数据进行异或运算，
					参与异或运算的数据位由p_u32Mask确定。

	参数:			p_u32Src -- 源操作数。
					p_u32Mask -- 位置掩码。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。
					详细说明见指令集手册。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 LXOR(DSPU32 p_u32Src, DSPU32 p_u32Mask, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);  

/******************************************************************
	函数名：		RXOR

	描述:			p_u32Src本身的若干位数据进行异或运算，
					参与异或运算的数据位由p_u32Mask确定。

	参数:			p_u32Src -- 源操作数。
					p_u32Mask -- 位置掩码。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。
					详细说明见指令集手册。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 RXOR(DSPU32 p_u32Src, DSPU32 p_u32Mask, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		Pass32

	描述:			32位数据传输，用于通过移位器进行的寄存器数据传输。

	参数:			p_u32Src -- 源操作数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。
					定点，浮点数据类型对标志位有无影响？

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Pass32(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		SetExp

	描述:			浮点数p_u32FloNum的指数赋予有符号固定值p_u32Exp，该值为-127~127 。

	参数:			p_u32FloNum -- 32位浮点数据。
					p_u32Exp -- 待设置的指数，有符号数，范围-127~127。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 SetExp(DSPU32 p_u32FloNum, DSPU32 p_u32Exp, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		PassBits

	描述:			将定点数p_u32Bits传送到p_u32Src中以p_u32Pos为起始，
					长度是p_u32BitsLen位的位置，并根据需要清零或保留其它位。

	参数:			p_u32Src -- 32位源操作数。
					p_u32Bits -- 待传送的定点数据。
					p_u32BitsLen -- 要传递的位长。
					p_u32Pos -- 要传递的起始位置。
					p_bolClr -- p_u32Src中的其它位是否需要清零。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		浮点数的指数。

	注意事项:		根据计算结果设置相关标志位。
					详见指令集手册Rs[15:8]=C {CLR}的定义。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 PassBits(DSPU32 p_u32Src, DSPU32 p_u32Bits, DSPU32 p_u32BitsLen, DSPU32 p_u32Pos, bool p_bolClr, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		ExtractExp

	描述:			提取32位浮点数p_u32Src的指数。

	参数:			p_u32Src -- 32位浮点数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		浮点数的指数。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 ExtractExp(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		ExtractMant

	描述:			提取32位浮点数p_u32Src的尾数。

	参数:			p_u32Src -- 32位浮点数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		浮点数的位数。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 ExtractMant(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
extern DSPU32 Fext(DSPU32 p_u32Src,  DSPU32 p_u32Rs, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
extern DSPU32 Fextz(DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);    
extern DSPU32 Fexts(DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		LXOR64

	描述:			p_u64Src本身的若干位数据进行异或运算，
					参与异或运算的数据位由p_u64Mask确定。

	参数:			p_u64Src -- 源操作数。
					p_u64Mask -- 位置掩码。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。
					详细说明见指令集手册。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU64 LXOR64(DSPU64 p_u64Src, DSPU64 p_u64Mask, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		RXOR64

	描述:			p_u64Src本身的若干位数据进行异或运算，
					参与异或运算的数据位由p_u64Mask确定。

	参数:			p_u64Src -- 源操作数。
					p_u64Mask -- 位置掩码。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。
					详细说明见指令集手册。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU64 RXOR64(DSPU64 p_u64Src, DSPU64 p_u64Mask, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		CompactC32

	描述:			32位定点复数压缩为16位定点复数。

	参数:			p_u32Src1 -- 待压缩定点数据1(实部)。
	                p_u32Src2 -- 待压缩定点数据2(虚部)。
					p_u32Pos -- 压缩后的16位数据来自32位源操作数中的哪个位段，
								数据大于16则按照16处理。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 CompactC32(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); //add by zhaoxiang 20080624

/*------------------------工大视频监控评估------------------------*/

/*found*****************************************************************
	函数名：		Append
	
	对应指令形式:  HRs=HHRm APPEND HHRn 
                 HRs=LHRm APPEND LHRn
                 HRs=HHRm APPEND LHRn
                 HRs=LHRm APPEND HHRn

	描述:			双16位组合指令，将两个双16位寄存器的高、低16位按照高高、低低、高低、低高4种组合方式进行组合，
	          放入目的寄存器。

	参数:		p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。
					p_u32Mode -- 数据组合方式。
					    00: p_u32Src1 的高16位 --> 结果的高16位; p_u32Src2 的高16位 --> 结果的低16位
					    01: p_u32Src1 的低16位 --> 结果的高16位; p_u32Src2 的低16位 --> 结果的低16位
					    10: p_u32Src1 的高16位 --> 结果的高16位; p_u32Src2 的低16位 --> 结果的低16位
					    11: p_u32Src1 的低16位 --> 结果的高16位; p_u32Src2 的高16位 --> 结果的低16位

	返回值：		双16位拼接后的值。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Append(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, DSPU32 p_u32Mode);

/*------------------------BWDSP1042------------------------*/
/*found*****************************************************************
	函数名：		JLH_32

	对应指令形式: Rs=Rm @* Rn(U)

	描述:			32位无符号整数，伽罗华乘。

	参数:		p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					polynomial -- 伽罗华系数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 JLH_32(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 polynomial, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		JLH_D16

	对应指令形式: HRs=HRm @* HRn(U)

	描述:			16位无符号整数，伽罗华乘

	参数:		p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					polynomial -- 伽罗华系数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 JLH_D16(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 polynomial, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		JLH_Q8

	对应指令形式: ORs=ORm @*ORn(U)

	描述:			8位无符号整数，伽罗华乘

	参数:		p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					polynomial -- 伽罗华系数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 JLH_Q8(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 polynomial, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);





/*found*****************************************************************
	函数名：		InsertToSACC

	对应指令形式:  SACCs=Rm Insert Rn
                 SACCs=Rm Insert_1 Rn 
                 SACCs=Rm Insert_0 Rn
                 SACCs=Rm delete Rn

	描述:			在Rm中由Rn指定的位置上插入或删除数据，并将结果存于SACC寄存器。

	参数:		p_SACC -- 64位SACC寄存器。
					p_u32SrcM -- 源操作数Rm。
					p_u32SrcN -- 源操作数Rn。
					p_u32Mode -- 模式选择。
					    0 -- 按照Rn内部确定的方式插入相应数据，Rn[4..0]为起始位置，Rn[8:5]为数据长度，Rn[31:16]为插入的数据，
					         如果数据长度小于16，则数据从第16位开始向高位截取相应长度数据。
					    1 -- 在Rm对应Rn内部为‘1’的位置上向左插入‘1’，将结果低32位记入Rs，高位如果不满32位则补零后记入Rs+1。
					    2 -- 在Rm对应Rn内部为‘1’的位置上向左插入‘0’，将结果低32位记入Rs，高位如果不满32位则补零后记入Rs+1。
					    3 -- 在Rn内部为‘1’的位置上删除Rm对应位置上的数据并相应右移，高位补零 。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void InsertToSACC(DSP_BIT64 &p_SACC, DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SACCInsert

	对应指令形式:  SACCs += Insert Rm(Rn)               // GRQ: the difference between SACCs=Rm Insert Rn?
                 SACCs += Insert_1 Rm+1:m
                 SACCs += Insert_0 Rm+1:m
                 SACCs += delete Rm+1:m

	描述:			在SACC中由Rn或Rm+1:m指定的位置上插入或删除数据。

	参数:		p_SACC -- 64位SACC寄存器。
					p_u32Src1 -- 源操作数Rm。
					p_u32Src2 -- 源操作数Rm+1(或Rn)。
					p_u32Mode -- 模式选择。
					    4 -- 按照Rn内部确定位置在SACC插入相应数据Rm，Rn[4:0]为起始位置，Rn[9:5]为数据长度。
					    5 -- 在SACCs对应Rm+1:m为‘1’的位置上插入‘1’并左移。
					    6 -- 在SACCs对应Rm+1:m为‘1’的位置上插入‘0’并左移。
					    7 -- 在SACCs对应Rm+1:m为‘1’的位置上删除SACC数据并右移，高位补零。 
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SACCInsert(DSP_BIT64 &p_SACC, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Vmin2L

	对应指令形式:  ORs=Vmin2(ORm+1:m,LSACCk)(U)

	描述:		选择 Rm[7:0]+ACCn[1:0]和Rm[15:8]+ACCn[3:2]中的最小值，赋给Rs[7:0];
          选择 Rm[23:16]+ACCn[5:4]和Rm[31:24]+ACCn[7:6]最小值，赋给Rs[15:8];
          选择 Rm+1[7:0]+ACCn[9:8]和Rm+1[15:8]+ACCn[11:10]中的最小值，赋给Rs[23:16];
          选择Rm+1[23:16]+ACCn[13:12]和Rm+1[31:24]+ACCn[15:14]最小值，赋给Rs[31:24]。
          
          指令结果影响比较大小标志位：
			    当(Rm[7:0]+ACCn[1:0])<(Rm[15:8]+ACCn[3:2])时，第0位标志位设置为1，否则设置为0；                  // 标志位指哪个寄存器？
          当(Rm[23:16]+ACCn[5:4]) < (Rm[31:24]+ACCn[7:6])时，第1位标志位设置为1，否则第1位设置为0；
          当(Rm+1[7:0]+ACCn[1:0])<(Rm+1[15:8]+ACCn[3:2])时，第2位标志位设置为1，否则设置为0；
          当(Rm+1[23:16]+ACCn[5:4]) < (Rm+1[31:24]+ACCn[7:6])时，第3位标志位设置为1，否则第3位设置为0。

	参数:		p_SACC -- 64位SACC寄存器。
					p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_pSCF -- 指向SCF标志寄存器。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Vmin2L(const DSP_BIT64 p_SACC, DSP_BIT64 p_Src, DSPU32 *p_pSCF, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Vmin2H

	对应指令形式:  ORs=Vmin2(ORm+1:m,HSACCk)(U)

	描述:		选择 Rm[7:0]+ACCn[17:16]和Rm[15:8]+ACCn[19:18]中的最小值，赋给Rs[7:0];
          选择 Rm[23:16]+ACCn[21:20]和Rm[31:24]+ACCn[23:22]最小值，赋给Rs[15:8];
          选择 Rm+1[7:0]+ACCn[25:24]和Rm+1[15:8]+ACCn[27:26]中的最小值，赋给Rs[23:16];
          选择 Rm+1[23:16]+ACCn[29:28]和Rm+1[31:24]+ACCn[31:30]最小值，赋给Rs[31:24]。
          
          指令结果影响比较大小标志位：
			    当(Rm[7:0]+ACCn[1:0])<(Rm[15:8]+ACCn[3:2])时，第0位标志位设置为1，否则设置为0；                  // 标志位指哪个寄存器？
          当(Rm[23:16]+ACCn[5:4]) < (Rm[31:24]+ACCn[7:6])时，第1位标志位设置为1，否则第1位设置为0；
          当(Rm+1[7:0]+ACCn[1:0])<(Rm+1[15:8]+ACCn[3:2])时，第2位标志位设置为1，否则设置为0；
          当(Rm+1[23:16]+ACCn[5:4]) < (Rm+1[31:24]+ACCn[7:6])时，第3位标志位设置为1，否则第3位设置为0。

	参数:		p_SACC -- 64位SACC寄存器。
					p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_pSCF -- 指向SCF标志寄存器。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Vmin2H(const DSP_BIT64 p_SACC, DSP_BIT64 p_Src, DSPU32 *p_pSCF, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Vmin3

	对应指令形式:  ORs=Vmin3(ORm+1:m,SACCk)(U)

	描述:		选择 Rm[7:0]+ACCn[2:0]和Rm[15:8]+ACCn[5:3]中的最小值，赋给Rs[7:0];
          选择 Rm[23:16]+ACCn[8:6]和Rm[31:24]+ACCn[11:9]最小值，赋给Rs[15:8];
          选择 Rm+1[7:0]+ACCn[14:12]和Rm[15:8]+ACCn[17:15]中的最小值，赋给Rs[23:16];
          选择 Rm[23:16]+ACCn[20:18]和Rm[31:24]+ACCn[23:21]最小值，赋给Rs[31:24]。
          
          指令结果影响比较大小标志位：
          当(Rm[7:0]+ACCn[2:0])<(Rm[15:8]+ACCn[5:3])时，第0位标志位设置为1，否则设置为0；
          当(Rm[23:16]+ACCn[8:6]) < (Rm[31:24]+ACCn[11:9]) 时，第2位标志位设置为1，否则设置为0；
          当(Rm+1[7:0]+ACCn[14:12])<(Rm+1[15:8]+ACCn[17:15])时，第2位标志位设置为1，否则设置为0；
          当(Rm+1[23:16]+ACCn[20:18]) < (Rm+1[31:24]+ACCn[23:21]) 时，第3位标志位设置为1，否则设置为0。

	参数:		p_SACC -- 64位SACC寄存器。
					p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_pSCF -- 指向SCF标志寄存器。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Vmin3(const DSP_BIT64 p_SACC, DSP_BIT64 p_Src, DSPU32 *p_pSCF, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		RShift32_SC
	
	对应指令形式:  Rs=Rm shift_R SCk

	描述:	  将Rm寄存器右移1位，最高位由标志寄存器结果填充，移出的数据放置到标志寄存器SCn[0]上，移位后的结果存入到目的寄存器Rs中。

	参数:		p_u32Rm -- 待移位定点数，对应Rm。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 RShift32_SC(DSPU32 p_u32Rm, DSPU32 &p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		LShift32_SC
	
	对应指令形式:  Rs=Rm shift_L SCk

	描述:	  将Rm寄存器左移1位，最低位由标志寄存器结果填充，移出的数据放置到标志寄存器SCn[0]上，移位后的结果存入到目的寄存器Rs中。

	参数:		p_u32Rm -- 待移位定点数，对应Rm。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 LShift32_SC(DSPU32 p_u32Rm, DSPU32 &p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		RShiftD16_SC
	
	对应指令形式:  HRs=HRm shift_R SCk  

	描述:	  将Rm寄存器两个16位同时右移1位，两个16位的最高位由标志寄存器低2位结果填充，移出的数据放置到标志寄存器低2位上，移位后的结果存入到目的寄存器Rs中。

	参数:		p_u32Rm -- 待移位定点数，对应Rm。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 RShiftD16_SC(DSPU32 p_u32Rm, DSPU32 &p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		LShiftD16_SC
	
	对应指令形式:  HRs=HRm shift_L SCk

	描述:	  将Rm寄存器两个16位同时左移1位，两个16位的最低位由标志寄存器低2位结果填充，移出的数据放置到标志寄存器低2位上，移位后的结果存入到目的寄存器Rs中。

	参数:		p_u32Rm -- 待移位定点数，对应Rm。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 LShiftD16_SC(DSPU32 p_u32Rm, DSPU32 &p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		RShiftD32_SC
	
	对应指令形式:  Rs+1:s=Rm+1:m RShift SCn

	描述:	  将Rm+1:m两个寄存器各自右移1位，最高位由标志寄存器结果低2位各自填充，移出的数据放置到各自标志寄存器上，移位后的结果存入到目的寄存器Rs+1:s中。

	参数:		p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_Dest -- 64位输出，p_Dest.Low32对应Rs，p_Dest.High32对应Rs+1。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。                             // 本算法会修改SC?
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void RShiftD32_SC(DSP_BIT64 &p_Src, DSP_BIT64 &p_Dest, DSPU32 &p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		LShiftD32_SC
	
	对应指令形式:  Rs+1:s=Rm+1:m LShift SCn

	描述:	  将Rm+1:m两个寄存器各自左移1位，最低位由标志寄存器结果低2位各自填充，移出的数据放置到各自标志寄存器上，移位后的结果存入到目的寄存器Rs+1:s中。

	参数:		p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_Dest -- 64位输出，p_Dest.Low32对应Rs，p_Dest.High32对应Rs+1。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void LShiftD32_SC(DSP_BIT64 &p_Src, DSP_BIT64 &p_Dest, DSPU32 &p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		RShiftQ16_SC
	
	对应指令形式:  HRs+1:s=HRm+1:m RShift SCn

	描述:	  将Rm+1:m 寄存器4个16位同时右移1位，4个16位的最高位由标志寄存器低4位结果填充，移出的数据放置到标志寄存器低4位上，移位后的结果存入到目的寄存器Rs中。

	参数:		p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_Dest -- 64位输出，p_Dest.Low32对应Rs，p_Dest.High32对应Rs+1。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void RShiftQ16_SC(DSP_BIT64 &p_Src, DSP_BIT64 &p_Dest, DSPU32 &p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		LShiftQ16_SC
	
	对应指令形式:  HRs+1:s=HRm+1:m LShift SCn 

	描述:	  将Rm+1:m 寄存器4个16位同时左移1位，4个16位的最低位由标志寄存器低4位结果填充，移出的数据放置到标志寄存器低4位上，移位后的结果存入到目的寄存器Rs中。

	参数:		p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_Dest -- 64位输出，p_Dest.Low32对应Rs，p_Dest.High32对应Rs+1。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void LShiftQ16_SC(DSP_BIT64 &p_Src, DSP_BIT64 &p_Dest, DSPU32 &p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		SXOR32To32
	
	对应指令形式:  Rs=Rm+1:m S_XOR SACCk    

	描述:	  按照SACCk内部‘1’的位置，确定Rm+1:m构成的数据序列中滑动处理参与异或运算的数据位置，形成32位输出，即：
          Rs(0)=(Rm(31)*SACC(31) @(Rm(30)*SACC(30))@....@(Rm(0)*SACC(0));
          Rs(1)=(Rm+1(0)*SACC(31)) @(Rm(31)*SACC(30))@....@(Rm(1)*SACC(0));
          …;
          Rs(31)=(Rm+1(30)*SACC(31)) @(Rm(29)*SACC(30))@....@(Rm(31)*SACC(0));

	参数:		p_SACC -- 64位SACC寄存器。
	        p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 SXOR32To32(const DSP_BIT64 p_SACC, DSP_BIT64 p_Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		SXORToD32
	
	对应指令形式:  Rs+1:s=Rm+1:m S_XOR HSACCk

	描述:	  将SACCk按照16位数据格式分为两组数据，分别将内部高16位和低16位数据中的‘1’位置，确定Rm+1:m构成的数据序列中滑动处理参与异或运算的数据位置，
	        形成两个32位输出，Rs+1为高16位数据运算结果，Rs为低16位数据运算结果，即：
          Rs(0)=(Rm(15)*SACC(15) @(Rm(14)*SACC(14))@....@(Rm(0)*SACC(0));
          Rs(1)=(Rm(16)*SACC(15)) @(Rm(15)*SACC(14))@....@(Rm(1)*SACC(0));
          …;
          Rs(31)=(Rm+1(14)*SACC(15)) @(Rm+1(13)*SACC(14))@....@(Rm(31)*SACC(0));

	参数:		p_SACC -- 64位SACC寄存器。
	        p_Dest -- 输出结果Rs+1:s。p_Dest.u32Low对应Rs, p_Dest.u32High对应Rs+1。
	        p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SXORToD32(const DSP_BIT64 &p_SACC, DSP_BIT64 &p_Dest, DSP_BIT64 &p_Src, DSPU32 p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		SHF_SStar
	
	对应指令形式:  ORs=ORm+1:m S*.OSACCk 

	描述:	  Rs[7..0]=(Rn[15..8]@*SACC[7..0]) XOR (Rn[23..16]@*SACC[15..8]) XOR
         (Rn[31..24]@*SACC[23..16] XOR (Rm[7..0]@*SACC[31..24])；Rs[15..8]=(Rn[23..16]@*SACC[7..0]) XOR (Rn[31..24]@*SACC[15..8]) XOR 
         (Rm[7..0]@*SACC[23..16] XOR (Rm[15..8]@*SACC[31..24])；Rs[23..16]=(Rn[31..24]@*SACC[7..0]) XOR (Rm[7..0]@*SACC[15..8]) XOR 
         (Rm[15..8]@*SACC[23..16] XOR (Rm[23..16]@*SACC[31..24])；
         Rs[31..24]=(Rm[7..0]@*SACC[7..0]) XOR (Rm[15..8]@*SACC[15..8]) XOR 
         (Rm[23..16]@*SACC[23..16] XOR (Rm[31..24]@*SACC[31..24])。

	参数:		p_SACC -- 64位SACC寄存器。
	        p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
	        polynomial -- 伽罗华系数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 SHF_SStar(const DSP_BIT64 p_SACC, DSP_BIT64 p_Src, DSPU32 polynomial, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		SHF_SAt
	
	对应指令形式:  ORs= ORm S@. OSACCk

	描述:	   Rs[7:0]=Rm[7:0]@*SACC[31:24];
           Rs[15..8]=(Rm[7..0]@*SACC[23..16]) XOR(Rm[15..8]@*SACC[31..24]);
           Rs[23..16]=(Rm[7..0]@*SACC[15..8]) XOR (Rm[15..8]@*SACC[23..16]) XOR (Rm[23..16]@*SACC[31..24]);
           Rs[31..24]=(Rm[7..0]@*SACC[7..0]) XOR (Rm[15..8]@*SACC[15..8]) XOR (Rm[23..16]@*SACC[23..16] XOR (Rm[31..24]@*SACC[31..24])。

	参数:		p_SACC -- 64位SACC寄存器。
	        p_u32Rm -- 待移位定点数，对应Rm。
	        polynomial -- 伽罗华系数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 SHF_SAt(const DSP_BIT64 p_SACC, DSPU32 p_u32Rm, DSPU32 polynomial, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		ABS2SACC
	
	对应指令形式:  SACCs=abs(BRm-BRn[2k+1:2k]) 后来改为 SACCs=Bit2_abs(Rm-Rn[2k+1:2k])
	               SACCs=abs(BRm-BRn[3k+2:3k]) 后来改为 SACCs=Bit3_abs(Rm-Rn[3k+2:3k])

	描述:	   见p_u32Mode参数说明。

	参数:		p_SACC -- 64位SACC寄存器。
	        p_u32Rm -- 待移位定点数，对应Rm。
	        p_u32Rn -- 待移位定点数，对应Rn。
	        p_u32Mode -- 模式选择。
	            0 -- SACCs=abs(BRm-BRn[2k+1:2k])，将Rm[1:0]- Rn[2k+1:2k], Rm[3:2]- Rn[2k+1:2k], …, Rm[31:30]- Rn[2k+1:2k],分别取绝对值，
	                 并将运算结果赋给SACCs对应位。结果不影响标志位。
	            1 -- SACCs=abs(BRm-BRn[3k+2:3k])，将Rm[2:0]- Rn[3k+2:3k], Rm[5:3]- Rn[3k+2:3k], …,Rm[29:27]- Rn[3k+2:3k],分别取绝对值，
	                 并将运算结果拼接后赋值给SACCs。SACCs的最高两位补零。结果不影响标志位。
	                 
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。
					p_u32K -- 对应指令形式中的参数k。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void ABS2SACC(DSP_BIT64 &p_SACC, DSPU32 p_u32Rm, DSPU32 p_u32Rn, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, DSPU32 p_u32Mode, DSPU32 p_u32K);

/*found*****************************************************************
	函数名：		SACCXor32
	
	对应指令形式:  SACCk=（Rm XOR SACCk）SC[0]    //SACCs=(Rn XOR SACCs)SC[0]

	描述:	   SACC[31]=SACC[30] XOR Rm[31];
           …;
           SACC[2]=SACC[1] XOR Rm[2];
           SACC[1]=SACC[0] XOR Rm[1];
           SACC[0]=SC[0] XOR Rm[0];

	参数:		p_SACC -- 64位SACC寄存器。
	        p_u32Rm -- 待移位定点数，对应Rm。
	        p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。                
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SACCXor32(DSP_BIT64 &p_SACC, DSPU32 p_u32Rm, DSPU32 p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		SACCXor16
	
	对应指令形式:  HSACCk = (HRm XOR SACCk）SC[1:0]  // HSACCs = (HRn XOR SACCs)SC[1:0] 

	描述:	   SACC[31]=SACC[30] XOR Rm[31];
           …;
           SACC[17]=SACC[17] XOR Rm[1];
           SACC[16]=SACC[16] XOR SC[1];
           
           SACC[15]=SACC[15] XOR Rm[15];
           …;
           SACC[2]=SACC[1] XOR Rm[2];
           SACC[1]=SACC[0] XOR Rm[1];
           SACC[0]=SC[0] XOR Rm[0];

	参数:		p_SACC -- 64位SACC寄存器。
	        p_u32Rm -- 待移位定点数，对应Rm。
	        p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。                
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SACCXor16(DSP_BIT64 &p_SACC, DSPU32 p_u32Rm, DSPU32 p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		INV32

	对应指令形式:  Rs=INV_0 Rm (U) 

	描述:			将Rm寄存器32位无符号数据前后顺序颠倒赋值给目的寄存器Rs

	参数:		p_u32Src -- 源操作数，对应Rm。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 INV32(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		INVD16

	对应指令形式:  HRs=INV_0 HRm (U) 

	描述:			将Rm寄存器数据分成双16位无符号数据，并将数据前后顺序颠倒赋值给目的寄存器HRs。

	参数:		p_u32Src -- 源操作数，对应Rm。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 INVD16(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		INVD32

	对应指令形式:  Rs+1:s=INV_0 Rm+1:m (U)   

	描述:		将Rm+1、Rm寄存器中32位无符号数据前后顺序颠倒分别赋值给目的寄存器Rs+1、Rs。

	参数:		p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_Dest -- 64位输出结果，p_Dest.Low32对应Rs，p_Dest.High32对应Rs+1。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void INVD32(DSP_BIT64 &p_Src, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		INVQ16

	对应指令形式:  HRs+1:s=INV_0 HRm+1:m (U)  

	描述:		将Rm+1、Rm寄存器数据分别分成双16位无符号数据，并将数据前后顺序颠倒分别赋值给目的寄存器Rs+1、Rs。

	参数:		p_Src -- 64位输入，p_Src.Low32对应Rm，p_Src.High32对应Rm+1。
					p_Dest -- 64位输出结果，p_Dest.Low32对应Rs，p_Dest.High32对应Rs+1。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void INVQ16(DSP_BIT64 &p_Src, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);





/*found*****************************************************************
	函数名：		Fext32ToGPR

	对应指令形式:  Rs=Rm fext Rn
                 Rs=Rm fext Rn(z)
                 Rs=Rm fext Rn(s)

	描述:		按照Rn寄存器内容确定数据裁减方式，取出数据长度为Rn[4:0]，数据起始位置为Rn[9:5]，数据放在Rs寄存器起始位置f为[14：10]。
	        此时“数据起始位置”小于等于32，如果“放置的起始位置”+“数据长度”大于32，数据段的左边超出了边界，要将移位器溢出标志置位。

	参数:		p_u32SrcM -- 32位输入，对应Rm。
					p_u32SrcN -- 32位输入，对应Rn。
					p_u32Dest -- 对应Rs。
					p_u32Mode -- 模式选择
							0 -- 非放置区赋予零值。
							1 -- 非放置区维持原值。
							2 -- 非放置区按照截取的最高位进行符号位扩展。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void Fext32ToGPR(DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 &p_u32Dest, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Fext32ToSACC

	对应指令形式:  SACCs=Rm fext Rn
                 SACCs=Rm fext Rn(z)
                 SACCs=Rm fext Rn(s)

	描述:		按照Rn寄存器内容确定数据裁减方式，取出数据长度为Rn[4:0]，数据起始位置为Rn[9:5]，数据放在Rs寄存器起始位置f为[14：10]。
	        此时“数据起始位置”小于等于32，如果“放置的起始位置”+“数据长度”大于32，数据段的左边超出了边界，要将移位器溢出标志置位。

	参数:		p_u32SrcM -- 32位输入，对应Rm。
					p_u32SrcN -- 32位输入，对应Rn。
					p_SACC -- 64位SACC寄存器。
					p_u32Mode -- 模式选择
							0 -- 非放置区赋予零值。
							1 -- 非放置区维持原值。
							2 -- 非放置区按照截取的最高位进行符号位扩展。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void Fext32ToReg(DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSP_BIT64 &p_SACC, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		InsGPRToSACC

	对应指令形式:  SACCs=Rm Insert Rn (p,q,f)    

	描述:		从Rn寄存器的起始位置p处，取出长度为q的数据，插入到Rm寄存器f处，结果赋给SACCs。

	参数:		p_u32SrcM -- 32位输入，对应Rm。
					p_u32SrcN -- 32位输入，对应Rn。
					p_SACC -- 64位SACC寄存器。
					p_u32P -- 对应p。
					p_u32Q -- 对应q。
					p_u32F -- 对应f。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void InsGPRToSACC(DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSP_BIT64 &p_SACC, DSPU32 p_u32P, DSPU32 p_u32Q, DSPU32 p_u32F, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		InsSACCToSACC

	对应指令形式:  SACCs=SACCs Insert Rn (p,q,f)   

	描述:		从Rn寄存器的起始位置p处，取出长度为q的数据，插入到SACC寄存器f处，结果赋给SACCs。

	参数:		p_u32SrcN -- 32位输入，对应Rn。
					p_SACC -- 64位SACC寄存器。
					p_u32P -- 对应p。
					p_u32Q -- 对应q。
					p_u32F -- 对应f。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void InsSACCToSACC(DSPU32 p_u32SrcN, DSP_BIT64 &p_SACC, DSPU32 p_u32P, DSPU32 p_u32Q, DSPU32 p_u32F, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		Fext64PQF

	对应指令形式:  Rs=Rm+1:m fext (p:q,f)
                 Rs=Rm+1:m fext (p:q,f)(z)
                 Rs=Rm+1:m fext (p:q,f)(s)

	描述:		从Rn寄存器的起始位置p处，取出长度为q的数据，插入到Rm寄存器f处，结果赋给SACCs。

	参数:		p_Src -- 64位输入，对应Rm+1:m。
					p_u32P -- 对应p。
					p_u32Q -- 对应q。
					p_u32F -- 对应f。
					p_u32Mode -- 模式选择
							0 -- 非放置区赋予零值。
							1 -- 非放置区维持原值。
							2 -- 非放置区按照截取的最高位进行符号位扩展。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Fext64PQF(DSP_BIT64 &p_Src, DSPU32 p_u32P, DSPU32 p_u32Q, DSPU32 p_u32F, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		CompactMN

	对应指令形式:  Rs=Compact(Rm_Rn,a)   

	描述:		将{Rm[a:0],Rn[31:a]}拼接后付值给Rs。

	参数:		p_u32SrcM -- 32位输入，对应Rm。
					p_u32SrcN -- 32位输入，对应Rn。
					p_u32A -- 对应a。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 CompactMN(DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 p_u32A, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		RegToSACC

	对应指令形式:  SACCs=Rn[k2:k1]

	描述:		将寄存器Rn[k2:k1]位数据放到序号为k的移位器的SACC标志寄存器上。

	参数:		p_u32SrcN -- 32位输入，对应Rn。
					p_SACC -- 64位SACC寄存器。
					p_u32K1 -- 参数K1.
	        p_u32K2 -- 参数K2.
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void RegToSACC(DSPU32 p_u32SrcN, DSP_BIT64 &p_SACC, DSPU32 p_u32K1, DSPU32 p_u32K2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SXOR16To32
	
	对应指令形式:  Rs=Rm S_XOR HSACCk

	描述:	  将SACCk按照16位数据格式分为两组数据，分别将内部高16位和低16位数据中的‘1’位置，确定Rm构成的数据序列中滑动处理参与异或运算的数据位置，Rs奇数位为高16位数据滑窗异或运算结果，Rs偶数位为低16位数据运算结果，即：
          Rs(0)=(Rm(15)*SACC(15)xor(Rm(14)*SACC(14))xor....xor(Rm(0)*SACC(0));
          Rs(1)=(Rm(15)*SACC(31))xor(Rm(14)*SACC(30))xor....xor(Rm(0)*SACC(16));
          Rs(2)=(Rm(16)*SACC(15))xor(Rm(15)*SACC(14))xor....xor(Rm(1)*SACC(0));
          Rs(3)=(Rm(16)*SACC(31))xor(Rm(15)*SACC(30))xor....xor(Rm(1)*SACC(16));
          …;
          Rs(30)=(Rm(30)*SACC(15))xor(Rm(29)*SACC(14))xor....xor(Rm(16)*SACC(0));
          Rs(31)=(Rm(30)*SACC(31))xor(Rm(29)*SACC(30))xor....xor(Rm(16)*SACC(16));

	参数:		p_SACC -- 64位SACC寄存器。
	        p_u32Src -- 32位输入，对应Rm。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	  计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 SXOR16To32(const DSP_BIT64 p_SACC, DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		SACCToReg

	对应指令形式:  Rs=SACCk[K2:K1]

	描述:		将64位寄存器SACCk中的[K2:K1]位赋给目的寄存器Rs，当K2-K1+1大于32位时，将低32位[(31+K1):k1]赋给目的寄存器Rs。

	参数:		p_SACC -- 64位SACC寄存器。
	        p_u32K1 -- 参数K1.
	        p_u32K2 -- 参数K2.
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：计算结果。	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 SACCToReg(const DSP_BIT64 &p_SACC, DSPU32 p_u32K1, DSPU32 p_u32K2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		AShift64SACC
	
	对应指令形式: Rs1Rs2=Rm+1:m aShift HSACCk 

	描述:		64位算术移位：将寄存器Rm+1和寄存器Rm分别作为高低32位合成一个64位数据，64位数算术移位（右移扩展符号，左移时低位补零），
	        移位值由寄存器HSACCk的第[38：32]位确定，7位数据最高位为符号位，正的表示左移，负的表示右移，结果影响标志位。

	参数:		p_Src -- 64位源操作数，对应Rm+1:m，低32位对应Rm，高32位对应Rm+1。
					p_SACC -- 64位SACC寄存器。
					p_Dest -- 64位计算结果, 低32位对应Rs1, 高32位对应Rs2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void AShift64SACC(const DSP_BIT64 p_Src, const DSP_BIT64 p_SACC, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		LShift64SACC
	
	对应指令形式: Rs1Rs2=Rm+1:m  Lshift  HSACCk 

	描述:		64位逻辑移位：将寄存器Rm+1和寄存器Rm分别作为高低32位合成一个64位数据，64位数逻辑移位（右移时不扩展符号位），
	        移位值由寄存器HSACCk的第[38：32]位确定，7位数据最高位为符号位，正的表示左移，负的表示右移，结果影响标志位。移位后留下的寄存器位补上‘0’。

	参数:		p_Src -- 64位源操作数，对应Rm+1:m，低32位对应Rm，高32位对应Rm+1。
					p_SACC -- 64位SACC寄存器。
					p_Dest -- 64位计算结果， 低32位对应Rs1, 高32位对应Rs2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void LShift64SACC(const DSP_BIT64 p_Src, const DSP_BIT64 p_SACC, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Rot64SACC
	
	对应指令形式: Rs1Rs2=Rm+1:m  rot  HSACCk 

	描述:		64位循环移位：将寄存器Rm+1和寄存器Rm分别作为高低32位合成一个64位数据，64位数循环移位，移位值由寄存器HSACCk的第[38：32]位确定，
	        7位数据最高位为符号位，正的表示左移，负的表示右移

	参数:		p_Src -- 64位源操作数，对应Rm+1:m，低32位对应Rm，高32位对应Rm+1。
					p_SACC -- 64位SACC寄存器。
					p_Dest -- 64位计算结果，低32位对应Rs1, 高32位对应Rs2。 
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void Rot64SACC(const DSP_BIT64 p_Src, const DSP_BIT64 p_SACC, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Fext64ToGPR

	对应指令形式:  Rs=Rm+1:m fext Rn
                 Rs=Rm+1:m fext Rn(z)
                 Rs=Rm+1:m fext Rn(s)

	描述:		从Rm+1和Rm寄存器构成一个64位数据，要求从中取出数据长度为Rn[4:0]，数据起始位置为Rn[9:5]，数据放在起始位置为Rn[14：10]的Rs寄存器上。

	参数:		p_Src -- 64位输入，对应Rm+1:m。
					p_u32SrcN -- 32位输入，对应Rn。
					p_u32Dest -- 对应Rs。
					p_u32SC -- 寄存器SC，位宽为4位(低4位有效)。
					p_u32Mode -- 模式选择
							0 -- 非放置区赋予零值。
							1 -- 非放置区维持原值。
							2 -- 非放置区按照截取的最高位进行符号位扩展。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void Fext64ToGPR(const DSP_BIT64 &p_Src, DSPU32 p_u32SrcN, DSPU32 &p_u32Dest, DSPU32 p_u32SC, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);





/*found*****************************************************************
	函数名：		SigmaSR

	对应指令形式:  SACCs = Sigma_b1(Rn，STABn(d))
								 SACCs += Sigma_b1(Rn，STABn (d))

	描述:		将Rn中的32位数与移位器TAB表中读出的32位数据分别作（-1）的指数相乘之后相加，结果计入寄存器SACCs；
          SACCs=Rn[0]×（-1）^TAB[0] +  Rn[1]×（-1）^TAB[1]+ … + Rn[31]×（-1）^TAB[31]；                    
          

	参数:		p_SACC -- 64位SACC寄存器。
					p_u32Rn -- 对应寄存器Rn。
					p_u32tab -- 对应STABn(d)。					
					p_bolAcc -- 控制是否与SACC中的值累加。
						true -- 与SACC中的值累加。
						false -- 不与SACC中的值累加。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SigmaSR(DSP_BIT64 &p_SACC, DSPU32 p_u32Rn, DSPU32 p_u32tab, bool p_bolAcc, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SigmaBR

	对应指令形式:  SACCs = Sigma_b2(Rn+1:n，STABn(d))
								 SACCs += Sigma_b2(Rn+1:n，STABn(d))

	描述:		Rn+1:n分成32个两位数，与TAB读出的32位数作（-1）的指数相乘之后累加，结果计入寄存器SACCs 。
          SACCs=Rn[1:0] ×（-1）^TAB[0]+ Rn[3:2] ×（-1）^TAB[1]+ … + Rn[31:30] ×（-1）^TAB[15]+Rn+1[1:0] ×（-1）^TAB[16]
                + Rn[3:2] ×（-1）^TAB[17]+ … + Rn[31:30] ×（-1）^TAB[31]；

	参数:		p_SACC -- 64位SACC寄存器。
					p_b64Src -- 对应寄存器Rn+1:n。
							u32Low -- Rn
							u32High -- Rn+1
					p_u32tab -- 对应STABn(d)。
					p_bolAcc -- 控制是否与SACC中的值累加。
						true -- 与SACC中的值累加。
						false -- 不与SACC中的值累加。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SigmaBR(DSP_BIT64 &p_SACC, const DSP_BIT64 &p_b64Src, DSPU32 p_u32tab, bool p_bolAcc, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SigmaQRHH

	对应指令形式:  SACCs = Sigma_b4(Rn+1:n，HHSTABn(d))
								 SACCs += Sigma_b4(Rn+1:n，HHSTABn(d))

	描述:		Rn+1:n分成16个4位数, 分别与TAB(d)的高16位作（-1）的指数相乘之后累加；结果计入寄存器SACCs 。
          SACCs=Rn[3:0] ×（-1）^TAB[16]+ Rn[7:4] ×（-1）^TAB[17] + … + Rn[31:28] ×（-1）^TAB[23]+Rn+1[3:0] ×（-1）^TAB[24]
                + Rn[7:4] ×（-1）^TAB[25] + … + Rn[31:28] ×（-1）^TAB[31]；

	参数:		p_SACC -- 64位SACC寄存器。
					p_b64Src -- 对应寄存器Rn+1:n。
							u32Low -- Rn
							u32High -- Rn+1
					p_u32tab -- 对应STABn(d)。
					p_bolAcc -- 控制是否与SACC中的值累加。
						true -- 与SACC中的值累加。
						false -- 不与SACC中的值累加。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SigmaQRHH(DSP_BIT64 &p_SACC, const DSP_BIT64 &p_b64Src, DSPU32 p_u32tab, bool p_bolAcc, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SigmaQRLH

	对应指令形式:  SACCs = Sigma_b4 (Rn+1:n，LHSTABn(d))
								 SACCs += Sigma_b4(Rn+1:n，LHSTABn(d))

	描述:		Rn+1:n分成16个4位数, 分别与TAB(d)的低16位作（-1）的指数相乘之后累加，结果计入寄存器SACCs 。
          SACCs=Rn[3:0] ×（-1）^TAB[0]+ Rn[7:4] ×（-1）^TAB[1] + … + Rn[31:28] ×（-1）^TAB[7]+Rn+1[3:0] ×（-1）^TAB[8]
                + Rn[7:4] ×（-1）^TAB[9] + … + Rn[31:28] ×（-1）^TAB[15]。

	参数:		p_SACC -- 64位SACC寄存器。
					p_b64Src -- 对应寄存器Rn+1:n。
							u32Low -- Rn
							u32High -- Rn+1
					p_u32tab -- 对应STABn(d)。
					p_bolAcc -- 控制是否与SACC中的值累加。
						true -- 与SACC中的值累加。
						false -- 不与SACC中的值累加。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SigmaQRLH(DSP_BIT64 &p_SACC, const DSP_BIT64 &p_b64Src, DSPU32 p_u32tab, bool p_bolAcc, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		TABToReg

	对应指令形式:  
                 Rs = STABn(LLORm)(k)
								 Rs = STABn(HLORm)(k)
                 Rs = STABn(LHORm)(k)
                 Rs = STABn(HHORm)(k)

	描述:		TAB是移位器内部对应的RAM，4个移位器，每个移位器对应一个TAB，用参数k表示区分。每个移位器包含4块8bitRAM,
	        每块8bitRAM又为4块（用参数n{0，1，2，3}表示），共包括4*4*256*8bit。
          微操作Rs = STABn(LLORm)(k)的指令含义：以Rm[7:0]为地址，同时从TABk存储器4块RAM中的第n个位置读出一个32位数据赋给目的寄存器堆Rs；
          微操作Rs = STABn(HLORm)(k)的指令含义：以Rm[15:8]为地址，同时从TABk存储器4块RAM中的第n个位置读出一个32位数据赋给目的寄存器堆Rs；
          微操作Rs = STABn(LHORm)(k)的指令含义：以Rm[23:16]为地址，同时从TABk存储器4块RAM中的第n个位置读出一个32位数据赋给目的寄存器堆Rs；
          微操作Rs = STABn(HHORm)(k)的指令含义：以Rm[31:24]为地址，同时从TABk存储器4块RAM中的第n个位置读出一个32位数据赋给目的寄存器堆Rs。

	参数:		p_u32Rm -- 对应寄存器Rm。
					p_pRAM -- 指向移位器内部RAM的指针。
					p_u32N -- 对应TAB索引n。
					p_u32Mode -- 模式控制。
						0 -- Rs = STABn(LLORm)(k)
						1 -- Rs = STABn(HLORm)(k)
						2 -- Rs = STABn(LHORm)(k)
						3 -- Rs = STABn(HHORm)(k)
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 TABToReg(DSPU32 p_u32Rm, SHF_RAM *p_pRAM, DSPU32 p_u32N, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		TABToHReg

	对应指令形式:  
                 HRs = HSTABn(H0Rm)(k)
								 HRs = HSTABn(L0Rm)(k)

	描述:		TAB是移位器内部对应的RAM，4个移位器，每个移位器对应一个TAB，用参数k表示区分。每个移位器包含4块8bitRAM,
	        每块8bitRAM又为4块（用参数n{0，1，2，3}表示），共包括4*4*256*8bit。
          微操作HRs = HSTABn(H0Rm)(k)的指令含义：Rm寄存器为32位数据，分成4个8位数，以Rm[31:24]、Rm[23:16]分别作地址，
              从TABk存储器4块RAM中的第n个位置读出2个16位数据赋给目的寄存器Rs，其中第0、1块RAM的读地址均为Rm[23:16]
              读出的数据输出到Rs的低16位，第2、3块RAM的读地址均为Rm[31:24]，读出的数据输出到Rs的高16位；
          微操作HRs = HSTABn(L0Rm)(k)的指令含义：Rm寄存器为32位数据，分成4个8位数，以Rm[15:8]、Rm[7:0]分别作地址，
              从TABk存储器4块RAM中的第n个位置读出2个16位数据赋给目的寄存器Rs，其中第0、1块RAM的读地址均为RmRm[7:0]
              读出的数据输出到Rs的低16位，第2、3块RAM的读地址均为Rm[15:8]，读出的数据输出到Rs的高16位；

	参数:		p_u32Rm -- 对应寄存器Rm。
					p_pRAM -- 指向移位器内部RAM的指针。
					p_u32N -- 对应TAB索引n。
					p_u32Mode -- 模式控制。
						0 -- HRs = HSTABn(H0Rm)(k)
						1 -- HRs = HSTABn(L0Rm)(k)
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 TABToHReg(DSPU32 p_u32Rm, SHF_RAM *p_pRAM, DSPU32 p_u32N, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		TABToOReg

	对应指令形式:  
                 ORs+= OSTABn(ORm)(U,k)

	描述:		TAB是移位器内部对应的RAM，4个移位器，每个移位器对应一个TAB，用参数k表示区分。每个移位器包含4块8bitRAM,
	        每块8bitRAM又为4块（用参数n{0，1，2，3}表示），共包括4*4*256*8bit。
          微操作ORs = OSTABn(ORm)(U,k)的指令含义：Rm寄存器为32位数据，分成4个8位数，以Rm寄存器4个8位数据分别作地址，
              从TABk存储器4块RAM中的第n个位置读出4个8位数据赋给目的寄存器Rs；
					微操作ORs+= OSTABn(ORm)(U,k)的指令含义：Rm寄存器为32位数据，分成4个8位数，以Rm寄存器4个8位数据分别作地址，
					    从TABk存储器4块RAM中的第n个位置读出4个8位数据分别与目的寄存器Rs中的4个8位数据相加后，结果赋给目的寄存器Rs；

	参数:		
					p_u32tab -- 对应OSTABn(ORm)
					p_u32Rs -- 对应寄存器Rs，并以此输出结果。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
//extern void TABToOReg(DSPU32 p_u32Rm, DSPU32 &p_u32Rs, SHF_RAM *p_pRAM, DSPU32 p_u32N, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
DSPU32 TABToOReg(DSPU32 p_u32tab, DSPU32 p_u32Rs, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		RegToTAB

	对应指令形式:  
								 STABn(LLORs) = Rm(k)
                 STABn(HLORs) = Rm(k)
                 STABn(LHORs) = Rm(k)
                 STABn(HHORs) = Rm(k)

	描述:		Rm寄存器数据分为4个8位无符号数据，每一个数据存放的地址为Rs寄存器内4个8位数据的某一个(LLORs、HLORs、LHORs或HHORs)，
					每一个TAB存储器对应的位置为n。即将Rm中4个8位数据存到4块RAM同一个地址上。
					其中LLORs表示Rs[7:0]；HLORs表示Rs[15:8]；LHORs表示Rs[23:16]；HHORs表示Rs[31:24]。

	参数:		p_u32Rm -- 对应寄存器Rm。
					p_u32Rs -- 对应寄存器Rs。
					p_pRAM -- 指向移位器内部RAM的指针。
					p_u32N -- 对应TAB索引n。
					p_u32Mode -- 模式控制。
						0 -- STABn(LLORs) = Rm(k)
						1 -- STABn(HLORs) = Rm(k)
						2 -- STABn(LHORs) = Rm(k)
						3 -- STABn(HHORs) = Rm(k)
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void RegToTAB(DSPU32 p_u32Rm, DSPU32 p_u32Rs, SHF_RAM *p_pRAM, DSPU32 p_u32N, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		HRegToTAB

	对应指令形式:  
                 HSTABn(HORs) = HRm(k)
                 HSTABn(LORs) = HRm(k)

	描述:		微操作HSTABn(HORs) = HRm(k)的指令含义：Rm寄存器数据分为2个16位数据，每一个数据存放的地址为Rs寄存器内对应的2个8位数据构成的地址，
	            在TAB存储器中对应的位置为n。该指令的含义是将Rn中2个16位数据存到TAB存储器4块RAM中的对应的地址上。其中数据Rm[15:0]对应的
	            地址为Rs[23:16]，对应第0块和第1块RAM；其中数据Rm[31:16]对应的地址为Rs[31:24]，对应第2块和第3块RAM。
          微操作HSTABn(LORs) = HRm(k)的指令含义：Rm寄存器数据分为2个16位数据，每一个数据存放的地址为Rs寄存器内对应的2个8位数据构成的地址，
              在TAB存储器中对应的位置为n。该指令的含义是将Rn中2个16位数据存到TAB存储器4块RAM中的对应的地址上。其中数据Rm[15:0]对应的
              地址为Rs[7:0]，对应第0块和第1块RAM；其中数据Rm[31:16]对应的地址为Rs[15:8]，对应第2块和第3块RAM。

	参数:		p_u32Rm -- 对应寄存器Rm。
					p_u32Rs -- 对应寄存器Rs。
					p_pRAM -- 指向移位器内部RAM的指针。
					p_u32N -- 对应TAB索引n。
					p_u32Mode -- 模式控制。
						0 -- HSTABn(HORs) = HRm(k)
						1 -- HSTABn(LORs) = HRm(k)
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void HRegToTAB(DSPU32 p_u32Rm, DSPU32 p_u32Rs, SHF_RAM *p_pRAM, DSPU32 p_u32N, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		ORegToTAB

	对应指令形式:  
                 OSTABn(ORs)  = ORm(U,k)
                 OSTABn(ORs) += ORm(U,k)

	描述:		微操作OSTABn(ORs)  = ORm(U,k)的指令含义：Rm寄存器数据分为4个8位数据，每一个数据存放的地址为Rs寄存器内4个8位数据构成的地址，
	            在TAB存储器中对应的位置为n。该指令的含义是将Rn中4个8位数据存到TAB存储器4块RAM中的对应的地址上
					模式为11时，微操作OSTABn(ORs) += ORm(U,k)的指令含义：从TAB读出4个8位数，与Rm中的4个8位数相加，结果存回到TAB存储器中。
					    相加结果是否作饱和处理由控制状态寄存器确定；结果影响溢出标志位。

	参数:		p_u32Rm -- 对应寄存器Rm。
					p_u32Rs -- 对应寄存器Rs。
					p_pRAM -- 指向移位器内部RAM的指针。
					p_u32N -- 对应TAB索引n。
					p_u32Mode -- 模式控制。
						0 -- OSTABn(ORs)  = ORm(U,k)
						1 -- OSTABn(ORs) += ORm(U,k)
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void ORegToTAB(DSPU32 p_u32Rm, DSPU32 p_u32Rs, SHF_RAM *p_pRAM, DSPU32 p_u32N, DSPU32 p_u32Mode, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		OTABAccConst

	对应指令形式:  
	               OSTABn(ORs) +=C(U,k)

	描述:		从TAB读出4个8位数，与常数C相加，结果存回到TAB存储器中。相加结果是否作饱和处理由控制状态寄存器确定；结果影响溢出标志位。

	参数:		p_u32C -- 对应常数C。
					p_u32Rs -- 对应寄存器Rs。
					p_pRAM -- 指向移位器内部RAM的指针。
					p_u32N -- 对应TAB索引n。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 OTABAccConst(DSPU32 p_u32tab, DSPU32 p_u32C,  DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);


//-------------------------------------
/*found*****************************************************************
	函数名：		CountZero32

	指令形式：Rs= Rm cnt0 Rn

	描述:			确定p_u32Src中从低到高的p_u32Len位数据中0的个数。

	参数:			p_u32Src -- 源操作数。
					p_u32Len -- 位串长度；即从低到高共p_u32Len位参与统计。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		0的个数。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 CountZero32(DSPU32 p_u32Src, DSPU32 p_u32Len, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		CountZeroD16
	
	指令形式：HRs= HRm cnt0 Rn

	描述:			确定p_u32Src中高低16位从低到高的p_u32Len位数据中0的个数。

	参数:			p_u32Src -- 源操作数，包括高低16位数据。
					p_u32Len -- 位串长度；即从低到高共p_u32Len位参与统计。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		0的个数。低16位的统计结果放在结果的低16位中；高16位的统计结果
					放在结果的高16位中。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 CountZeroD16(DSPU32 p_u32Src, DSPU32 p_u32Len, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		CountOne32
	
	指令形式：Rs= Rm cnt1 Rn
						Rs=Rm cnt1 a
						Rs=Rm cnt1

	描述:			确定p_u32Src中从低到高的p_u32Len位数据中1的个数。

	参数:			p_u32Src -- 源操作数。
					p_u32Len -- 位串长度。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		1的个数。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 CountOne32(DSPU32 p_u32Src, DSPU32 p_u32Len, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		CountOneD16

	指令形式：HRs= HRm cnt1 Rn
						HRs=HRm cnt1 a
						HRs=HRm cnt1

	描述:			确定p_u32Src中高低16位从低到高的p_u32Len位数据中1的个数。

	参数:			p_u32Src -- 源操作数，包括高低16位数据。
					p_u32Len -- 位串长度。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		1的个数。低16位的统计结果放在结果的低16位中；高16位的统计结果
					放在结果的高16位中。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 CountOneD16(DSPU32 p_u32Src, DSPU32 p_u32Len, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		OnePosi32

	指令形式：Rs= Rm pos1 Rn

	描述:			确定p_u32Src中从低到高的p_u32Len位数据中为1的最高位。

	参数:			p_u32Src -- 源操作数。
					p_u32Len -- 位串长度；即从低到高共p_u32Len位参与统计。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		为1的最高位。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 OnePosi32(DSPU32 p_u32Src, DSPU32 p_u32Len, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		OnePosiD16

	指令形式：HRs= HRm pos1 Rn

	描述:			确定p_u32Src中高低16位从低到高的p_u32Len位数据中为1的最高位。

	参数:			p_u32Src -- 源操作数，包括高低16位数据。
					p_u32Len -- 位串长度；即从低到高共p_u32Len位参与统计。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		为1的最高位。低16位的统计结果放在结果的低16位中；高16位的统计结果
					放在结果的高16位中。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 OnePosiD16(DSPU32 p_u32Src, DSPU32 p_u32Len, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		And32

	指令形式：Rs=Rm & Rn

	描述:			求两个32位数据的与。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 And32(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Or32

	指令形式：Rs=Rm | Rn

	描述:			求两个32位数据的或。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Or32(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		NAnd32

	指令形式：Rs=Rm &! Rn

	描述:			求两个32位数据的与非。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 NAnd32(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		NOr32

	指令形式：Rs=Rm |! Rn

	描述:			求两个32位数据的或非。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 NOr32(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Xor32

	指令形式：Rs=Rm ^ Rn

	描述:			求两个32位数据的异或。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Xor32(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Not32

	指令形式：Rs=! Rm

	描述:			将32位数据的非。

	参数:			p_u32Src -- 32位定点数据。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Not32(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Float16

	指令形式：FRs=Float HHRm
						FRs=Float LHRm
						CFRs+1:s=Float CHRm

	描述:			将16位定点数据转变为32位浮点数据。

	参数:			p_u16Src -- 16位定点整数。
						p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
						p_u32SHFCR -- 移位器控制寄存器。

	返回值：		32位浮点结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Float16(DSPU16 p_u16Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Abs32
	
	指令形式：Rs=ABS Rn

	描述:			求32位定点数的绝对值。

	参数:			p_u32Src -- 源操作数（32位有符号数）。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。		

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。
					2. 源操作数总认为是有符号数。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Abs32(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/*found*****************************************************************
	函数名：		AbsD16

	指令形式：HRs=ABS HRn

	描述:			输入数据的高低16位分别求绝对值。

	参数:			p_u32Src -- 源操作数（包括高低16位两个定点有符号数）。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。		

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。
					2. 源操作数总认为是有符号数。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 AbsD16(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		AbsFlo32

	指令形式：FRs=ABS FRn

	描述:			求32位浮点数的绝对值。

	参数:			p_u32Src -- 源操作数。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。		

	返回值：		计算结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 AbsFlo32(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		PermuteCFix16

	指令形式：CHRs=permute CHRn
						CHRs=-(permute CHRn)

	描述:			16位定点复数实部虚部互换。

	参数:			p_u32Src -- 16位定点复数（低16位虚部，高16位实部）。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。
					p_bolNeg -- 在实部虚部互换的基础上是否还要求负。			

	返回值：		16位定点复数（低16位虚部，高16位实部）。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 PermuteCFix16(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, bool p_bolNeg);

/*found*****************************************************************
	函数名：		ConjCFix16

	指令形式：CHRs=conj CHRn
						CHRs=-(conj CHRn)

	描述:			求16位定点复数的共轭。

	参数:			p_u32Src -- 16位定点复数（低16位虚部，高16位实部）。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。
					p_bolNeg -- 在求共轭的基础上是否还要求负。			

	返回值：		16位定点复数（低16位虚部，高16位实部）。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 ConjCFix16(DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, bool p_bolNeg);

/*found*****************************************************************
	函数名：		Float32

	指令形式：FRs=Float Rs 
						FRs=Float(Rs,C)
						CFRs+1:s=Float CRs+1:s 
						CFRs+1:s=Float(CRs+1:s，C)

	描述:			将32位定点数据转变为32位浮点数据。

	参数:			p_u32Src -- 32位定点数据。
						p_u32Adjust -- 指数调整，详见指令集手册。
						p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
						p_u32SHFCR -- 移位器控制寄存器。

	返回值：		32位浮点结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Float32(DSPU32 p_u32Src, DSPU32 p_u32Adjust, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
    
    
/*found*****************************************************************
	函数名：		Fix32

	指令形式：Rs=FIX FRs
						Rs=FIX(FRs,C)
						CRs+1:s=FIX CFRs+1:s
						CRs+1:s=FIX(CFRs+1:s,C)

	描述:			将32位浮点数据转变为32位定点数据。

	参数:			p_u32Src -- 32位定点数据。
					p_u32Adjust -- 指数调整，详见指令集手册。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		32位定点结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Fix32(DSPU32 p_u32Src, DSPU32 p_u32Adjust, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
    
//----------------------------------------------------------------------------------------------
/*found*****************************************************************
	函数名：		Flo64ToFix32

	指令形式：Rs=FIX DFRm+1:m
						Rs=FIX(DFRm+1:m,C)

	描述:			将64位浮点数据转变为32位定点数据。

	参数:		p_u32SrcLow -- 64位浮点数的低32位，对应Rm。
					p_u32SrcHigh -- 64位浮点数的高32位，对应Rm+1。
					p_u32Adjust -- 有符号数,对应指令中的C。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		32位定点结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Flo64ToFix32(DSPU32 p_u32SrcLow, DSPU32 p_u32SrcHigh, DSPU32 p_u32Adjust, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Fix32ToFlo64

	指令形式：DFRs+1:s=Double Rm
						DFRs+1:s=Double(Rm,C)

	描述:			将32位定点数据转变为64位浮点数据。

	参数:		p_u32Src -- 32位定点源操作数，对应Rm。
					p_u32DestLow -- 64位浮点数的低32位，对应Rs。
					p_u32DestHigh -- 64位浮点数的高32位，对应Rs+1。
					p_u32Adjust -- 有符号数,对应指令中的C。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		无。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern void Fix32ToFlo64(DSPU32 p_u32Src, DSPU32 &p_u32DestHigh, DSPU32 &p_u32DestLow, DSPU32 p_u32Adjust, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		BitAbs2k

	对应指令形式:  SACCs=Bit_abs(Rm-Rn[2k+1:2k])

	描述:		将Rm[1:0]- Rn[2k+1:2k], Rm[3:2]- Rn[2k+1:2k], …, Rm[31:30]- Rn[2k+1:2k],分别取绝对值，
	        并将运算结果赋给SACCs对应位。结果不影响标志位。
          例如k=0时，表示将Rm[1:0]- Rn[1:0], Rm[3:2]- Rn[1:0], …, Rm[31:30]- Rn[1:0],分别取绝对值，
          并将运算结果赋给SACCs对应位。                    

	参数:		p_SACC -- 64位SACC寄存器，存放输出结果。
					p_u32Src1 -- 32位源操作数1，对应Rm。
					p_u32Src2 -- 32位源操作数2，对应Rn。
					p_u32K -- 参数k。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		无。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void BitAbs2k(DSP_BIT64 &p_SACC, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 p_u32K, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		BitAbs3k

	对应指令形式:  SACCs=Bit_abs(Rm-Rn[3k+2:3k])

	描述:		将Rm[2:0]- Rn[3k+2:3k], Rm[5:3]- Rn[3k+2:3k], …,Rm[29:27]- Rn[3k+2:3k],分别取绝对值，
	        并将运算结果拼接后赋值给SACCs。SACCs的最高两位补零。结果不影响标志位。
          例如k=0时，表示将Rm[2:0]- Rn[2:0], Rm[5:3]- Rn[2:0], …,Rm[29:27]- Rn[2:0],分别取绝对值，
          并将运算结果拼接后赋值给SACCs。SACCs的最高两位补零。                

	参数:		p_SACC -- 64位SACC寄存器，存放输出结果。
					p_u32Src1 -- 32位源操作数1，对应Rm。
					p_u32Src2 -- 32位源操作数2，对应Rn。
					p_u32K -- 参数k。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		无。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void BitAbs3k(DSP_BIT64 &p_SACC, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 p_u32K, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SaccXorReg

	对应指令形式:  SACCs=(Rn^SACCs)SC[0]

	描述:		SACC[31]=SACC[30] XOR Rm[31];
					…;
					SACC[2]=SACC[1] XOR Rm[2];
					SACC[1]=SACC[0] XOR Rm[1];
					SACC[0]=SC[0] XOR Rm[0];       

	参数:		p_SACC -- 64位SACC寄存器。
					p_u32Rn -- 32位源操作数1，对应Rn。
					p_u32SC -- 32位源操作数2，对应SC。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		无。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SaccXorReg(DSP_BIT64 &p_SACC, DSPU32 p_u32Rn, DSPU32 p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SaccHXorReg

	对应指令形式:  HSACCs = (HRn^HSACCs)SC[1:0]

	描述:		SACC[31]=SACC[30] XOR Rm[31];
					…;
					SACC[17]=SACC[16] XOR Rm[17];
					SACC[16]=SC[1] XOR  Rm[16];

					SACC[15]=SACC[14] XOR Rm[15];
					…;
					SACC[2]=SACC[1] XOR Rm[2];
					SACC[1]=SACC[0] XOR Rm[1];
					SACC[0]=SC[0] XOR Rm[0];

	参数:		p_SACC -- 64位SACC寄存器。
					p_u32Rn -- 32位源操作数1，对应Rn。
					p_u32SC -- 32位源操作数2，对应SC。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		无。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SaccHXorReg(DSP_BIT64 &p_SACC, DSPU32 p_u32Rn, DSPU32 p_u32SC, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		SHF_Add_Sub32
	
	对应指令形式:  Rm_n=Rm+/-Rn (U,sft)
								 Rm_n=Rm+/-Rn (sft)
								 Rm_n=(Rm+/-Rn)/2 (U,sft)
								 Rm_n=(Rm+/-Rn)2/ (sft)

	描述:	  Rm和Rn寄存器上的32位定点类型的数据同时进行相加/相减操作，加的结果放在Rm寄存器，减的结果放在Rn寄存器。
					详细说明见指令集20130402。

	参数:		p_Rm_n -- 64位结果寄存器，高32位放Rm，低32位放Rn。
	        p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器,第0位被算法库扩展用于表示源操作数是否为有符号数。
					    p_u32SHFCR[0] == 1： 源操作数为有符号数
					    p_u32SHFCR[0] == 0： 源操作数为无符号数
					p_bolHalf -- 结果是否除以2。
							p_bolHalf == 0: 不除以2
							p_bolHalf == 1: 除以2。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SHF_Add_Sub32(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, bool p_bolHalf);

/******************************************************************
	函数名：		SHF_Add_SubD16
	
	对应指令形式:  HRm_n=HRm+/-HRn (U,sft)
								 HRm_n=(HRm+/-HRn)/2(U,sft)
								 HRm_n=HRm+/-HRn(sft)
								 HRm_n=(HRm+/-HRn)/2(sft)
								 
	描述:	  Rm和Rn寄存器上的双16位定点类型的数据同时进行相加/相减操作，高16位与高16位相加/减；低16位与低16位相加/减。
	        加的结果放在Rm寄存器，减的结果放在Rn寄存器。
	        双16位的操作，标志寄存器的是两个操作标志的或。
	        详细说明见指令集20130402。

	参数:		p_Rm_n -- 64位结果寄存器，高32位放Rm，低32位放Rn。
	        p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器,第0位被算法库扩展用于表示源操作数是否为有符号数。
					    p_u32SHFCR[0] == 1： 源操作数为有符号数
					    p_u32SHFCR[0] == 0： 源操作数为无符号数
					p_bolHalf -- 结果是否除以2。
							p_bolHalf == 0: 不除以2
							p_bolHalf == 1: 除以2。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SHF_Add_SubD16(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, bool p_bolHalf);
/******************************************************************
	函数名：		SHF_Add_SubC32
	
	对应指令形式:  CHRm_n=CHRm+/-CHRn(sft)
								 CHRm_n=(CHRm+/-CHRn)/2(sft)

	描述:	  16位定点复数同时加/减运算、16位定点复数同时加/减并除以2运算。加的结果放在Rm，减的结果放在Rn。
					详细说明见指令集20130402。
					
	参数:		p_Rm_n -- 64位结果寄存器，高32位放Rm，低32位放Rn。
	        p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器.
					p_bolHalf -- 结果是否除以2。
							p_bolHalf == 0: 不除以2
							p_bolHalf == 1: 除以2。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SHF_Add_SubC32(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, bool p_bolHalf);
/******************************************************************
	函数名：		SHF_Add_SubConjC32
	
	对应指令形式:  CHRm_n=CHRm+/-jCHRn(sft)
								 CHRm_n=(CHRm+/-jCHRn)/2(sft)

	描述:	  16位定点复数CHRm同时加/减16位定点复数j*CHRn、16位定点复数CHRm同时加/减16位定点复数j*CHRn并且除以2。加的结果放在Rm，减的结果放在Rn。
					详细说明见指令集20130402。
					
	参数:		p_Rm_n -- 64位结果寄存器，高32位放Rm，低32位放Rn。
	        p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。
					p_bolHalf -- 结果是否除以2。
							p_bolHalf == 0: 不除以2
							p_bolHalf == 1: 除以2。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SHF_Add_SubConjC32(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, bool p_bolHalf);

/******************************************************************
	函数名：		Add32SHF

	描述:			32位定点数据相加。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Add32SHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		Sub32SHF

	描述:			32位定点数据相减。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Sub32SHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		AddD16SHF

	描述:			输入数据的高低16位分别作定点数据相加。

	参数:			p_u32Src1 -- 源操作数1，包含高低两个16位定点数据。
					p_u32Src2 -- 源操作数2，包含高低两个16位定点数据。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位；
					本操作包括两个16位操作，标志寄存器设置为两次结果的相或。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 AddD16SHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		SubD16SHF

	描述:			输入数据的高低16位分别作定点数据相减。

	参数:			p_u32Src1 -- 源操作数1，包含高低两个16位定点数据。
					p_u32Src2 -- 源操作数2，包含高低两个16位定点数据。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位；
					本操作包括两个16位操作，标志寄存器设置为两次结果的相或。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 SubD16SHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		Add32HalfSHF

	描述:			32位定点数据相加，再求平均。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Add32HalfSHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		Sub32HalfSHF

	描述:			32位定点数据相减，再求平均。

	参数:			p_u32Src1 -- 源操作数1。
					p_u32Src2 -- 源操作数2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 Sub32HalfSHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		AddD16HalfSHF

	描述:			输入数据的高低16位分别作定点数据相加，再求平均。

	参数:			p_u32Src1 -- 源操作数1，包含高低两个16位定点数据。
					p_u32Src2 -- 源操作数2，包含高低两个16位定点数据。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位；
					本操作包括两个16位操作，标志寄存器设置为两次结果的相或。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 AddD16HalfSHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
    
/******************************************************************
	函数名：		SubD16HalfSHF

	描述:			输入数据的高低16位分别作定点数据相减，再求平均。

	参数:			p_u32Src1 -- 源操作数1，包含高低两个16位定点数据。
					p_u32Src2 -- 源操作数2，包含高低两个16位定点数据。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位；
					本操作包括两个16位操作，标志寄存器设置为两次结果的相或。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 SubD16HalfSHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		AddD16CJSHF

	描述:			实现16位定点复数运算：(a + bi) + j(c + di)

	参数:			p_u32Src1 -- 源操作数1，包含高低两个16位定点数据(a + bi)，低16位存放虚部。
					p_u32Src2 -- 源操作数2，包含高低两个16位定点数据(c + di)，低16位存放虚部。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位；
					本操作包括两个16位操作，标志寄存器设置为两次结果的相或。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 AddD16CJSHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
    
/******************************************************************
	函数名：		SubD16CJSHF

	描述:			实现16位定点复数运算：(a + bi) - j(c + di)

	参数:			p_u32Src1 -- 源操作数1，包含高低两个16位定点数据(a + bi)，低16位存放虚部。
					p_u32Src2 -- 源操作数2，包含高低两个16位定点数据(c + di)，低16位存放虚部。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位；
					本操作包括两个16位操作，标志寄存器设置为两次结果的相或。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 SubD16CJSHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		AddD16HalfCJSHF

	描述:			实现16位定点复数运算：[(a + bi) + j(c + di)] / 2

	参数:			p_u32Src1 -- 源操作数1，包含高低两个16位定点数据(a + bi)，低16位存放虚部。
					p_u32Src2 -- 源操作数2，包含高低两个16位定点数据(c + di)，低16位存放虚部。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位；
					本操作包括两个16位操作，标志寄存器设置为两次结果的相或。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 AddD16HalfCJSHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
    
/******************************************************************
	函数名：		SubD16HalfCJSHF

	描述:			实现16位定点复数运算：[(a + bi) - j(c + di)] / 2

	参数:			p_u32Src1 -- 源操作数1，包含高低两个16位定点数据(a + bi)，低16位存放虚部。
					p_u32Src2 -- 源操作数2，包含高低两个16位定点数据(c + di)，低16位存放虚部。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位；
					本操作包括两个16位操作，标志寄存器设置为两次结果的相或。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 SubD16HalfCJSHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);


/******************************************************************
	函数名：		ExpandC16

	描述:			16位定点复数扩展为32位定点复数，详细说明见指令集20130402。。

	参数:		p_Rm_n -- 64位结果寄存器，高32位放Rs+1，低32位放Rs。	
					p_u32Src -- 待扩展16位定点复数。
					p_u32Pos -- 表示待扩展的16位数据在32位目的寄存器Rs中所处的位置，
								数据大于16则按照16处理。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位；
					是否做符号位扩展由p_u32SHFCR决定。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void ExpandC16(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		FloatC16

	指令形式：CFRs+1:s=Float CHRm

	描述:			将16位定点复数据转变为32位浮点数据，详细说明见指令集20130402。。

	参数:			p_Rm_n -- 64位结果寄存器，高32位放Rs+1，低32位放Rs。
						p_u32Src -- 16位定点复数。
						p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
						p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern void FloatC16(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		FixC32

	指令形式：CRs+1:s=FIX CFRs+1:s
						CRs+1:s=FIX(CFRs+1:s,C)

	描述:			将32位浮点复数转变为32位定点复数，详细说明见指令集20130402。

	参数:		p_Rm_n -- 64位结果寄存器，高32位放Rs+1，低32位放Rs。	
					p_u32Src1 -- 源操作数1，对应Rs。
					p_u32Src2 -- 源操作数2，对应Rs+1。
					p_u32Adjust -- 指数调整，详见指令集手册。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern void FixC32(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 p_u32Adjust, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		FloatC32

	指令形式：CFRs+1:s=Float CRs+1:s 
						CFRs+1:s=Float(CRs+1:s，C)

	描述:			将32位定点复数转变为32位浮点复数，详细说明见指令集20130402。

	参数:			p_Rm_n -- 64位结果寄存器，高32位放Rs+1，低32位放Rs。	
					  p_u32Src1 -- 源操作数1，对应Rs。
					  p_u32Src2 -- 源操作数2，对应Rs+1。
						p_u32Adjust -- 指数调整，详见指令集手册。
						p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
						p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern void FloatC32(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 p_u32Adjust, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		AShiftC32

	对应指令形式:  CRs+1:s=CRm+1:m ashift a
	
	描述:			32位复数移位，详细说明见指令集20130402。

	参数:			p_Rm_n -- 64位结果寄存器，高32位放Rs+1，低32位放Rs。
						p_u32Src1 -- 源操作数1，对应Rm。
					  p_u32Src2 -- 源操作数2，对应Rm+1。
					p_u32BitToShift -- 移动位数， 正表示左移，负表示右移。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 AShiftC32(DSP_BIT64 &p_Rm_n, DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		Compact16To8
	
	对应指令形式:			LORm=COMPACT(HRm,a)(U)
										HORm=COMPACT(HRm,a)(U)
										LORm=COMPACT(HRm,a)
										HORm=COMPACT(HRm,a)
										LORm=COMPACT(HRm,Rn)(U)
										HORm=COMPACT(HRm,Rn)(U)
										LORm=COMPACT(HRm,Rn)
										HORm=COMPACT(HRm,Rn)

	描述:			16位定点数转换为8位定点数,详见指令集20130507移位器180指令。

	参数:		p_u32Src -- 待压缩定点数据。
					p_u32Pos -- 对应指令中的立即数a或Rn，表示压缩后的8位数据来自16位定点数中的哪个位域。
					p_u32IsHigh -- 高/低选择，控制转换后的8位定点数的位置。
													为0时，位于Rm[15:8]、Rm[7:0]；
													为1时，位于Rm[31:24]、Rm[23:16]。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。第0位表示有无符号数，0--无符号数，1--有符号数。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。
							计算结果只修改了Rm的16位，剩余16位仍保持原值。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Compact16To8(DSPU32 p_u32Src, DSPU32 p_u32Pos, bool p_IsHigh, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		Expand8To16
	
	对应指令形式:			HRm=EXPAND(LORM,a)(U)
										HRm=EXPAND(HORM,a)(U)
										HRm=EXPAND(LORM,a)
										HRm=EXPAND(HORM,a)
										HRm=EXPAND(LORM,Rn)(U)
										HRm=EXPAND(HORM,Rn)(U)
										HRm=EXPAND(LORM,Rn)
										HRm=EXPAND(HORM,Rn)

	描述:			8位定点数转换为16位定点数,详见指令集20130507移位器180指令。

	参数:		p_u16Src -- 待扩展16位定点数。
					p_u32Pos -- 对应指令中的立即数a或Rn，表明压缩前的8位数据放入16位定点数中的哪个位域。
					p_u32IsHigh -- 高/低选择，控制转换前的8位定点数的位置。
													为0时，位于Rm[15:8]、Rm[7:0]；
													为1时，位于Rm[31:24]、Rm[23:16]。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。第0位表示有无符号数，0--无符号数，1--有符号数。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位；
					是否做符号位扩展由p_u32SHFCR决定。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Expand8To16(DSPU32 p_u16Src, DSPU32 p_u32Pos, bool p_IsHigh, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		ExpandDW8To16
	
	对应指令形式:			HRs1HRs2=EXPAND(ORm,a)(U)
										HRs1HRs2=EXPAND(ORm,Rn)(U)
										HRs1HRs2=EXPAND(ORm,a)
										HRs1HRs2=EXPAND(ORm,Rn)

	描述:			双字指令，将4个8位定点数转换为4个16位定点数,详见指令集20130507双字5指令。

	参数:		p_Res -- 64位结果寄存器，低32位对应Rs1, 高32位对应Rs2。
					p_u32Src -- 待扩展8位定点数，对应Rm。
					p_u32Pos -- 对应指令中的立即数a或Rn。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器，第0位表示有无符号数，0--无符号数，1--有符号数。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位；

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void ExpandDW8To16(DSP_BIT64 &p_Res, DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		CompactDW16to8
	
	对应指令形式:			ORs=COMPACT(HRmHRn,a)(U)
										ORs=COMPACT(HRmHRn,a)

	描述:			双字指令，将4个16位定点数转换为4个8位定点数,详见指令集20130507双字5指令。

	参数:		p_u32Rm -- 待压缩位定点数，对应Rm。
					p_u32Rn -- 待压缩位定点数，对应Rn。
					p_u32Pos -- 对应指令中的立即数a。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器，第0位表示有无符号数，0--无符号数，1--有符号数。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位；

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 CompactDW16to8(DSPU32 p_u32Rm, DSPU32 p_u32Rn, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		AddQ8SHF
	
	对应指令形式: ORs=ORm+ORn(U)
								ORs=ORm+ORn

	描述:		4个8位定点数分别相加。详见指令集20130904版。

	参数:		p_u32Src1 -- 源操作数1，对应Rm，包含四个8位定点数据。
					p_u32Src2 -- 源操作数2，对应Rn，包含四个8位定点数据。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器,第0位为1时为有符号定点加，第0位为0时为无符号定点加。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 AddQ8SHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SubQ8SHF
	
	对应指令形式: ORs=ORm-ORn(U)
								ORs=ORm-ORn

	描述:		4个8位定点数分别相减。详见指令集20130904版。

	参数:		p_u32Src1 -- 源操作数1，对应Rm，包含四个8位定点数据。
					p_u32Src2 -- 源操作数2，对应Rn，包含四个8位定点数据。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- SHF控制寄存器,第0位为1时为有符号定点减，第0位为0时为无符号定点减。

	返回值：		计算结果。

	注意事项:		根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
	*******************************************************************/
extern DSPU32 SubQ8SHF(DSPU32 p_u32Src1, DSPU32 p_u32Src2, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Exchang

	对应指令形式:  Rs1Rs2=exchange(Rm,Rn,a)

	描述:		把Rm与Rn组成一个位串，详细说明见指令集20130904。

	参数:		p_u32SrcM -- 32位输入，对应Rm。
					p_u32SrcN -- 32位输入，对应Rn。
					p_u32A -- 对应a。
					p_Dest -- 64位输出，低32位对应Rs1, 高32位对应Rs2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void Exchang(DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 p_u32A, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SExchang

	对应指令形式:  Rs1Rs2=s_exchange(Rm,Rn,a)

	描述:		把Rm与Rn组成一个位串，详细说明见指令集20130904。

	参数:		p_u32SrcM -- 32位输入，对应Rm。
					p_u32SrcN -- 32位输入，对应Rn。
					p_u32A -- 对应a。
					p_Dest -- 64位输出，低32位对应Rs1, 高32位对应Rs2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SExchang(DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 p_u32A, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		InsertReg

	对应指令形式:  Rs1Rs2=Rm Insert Rn (f:g)

	描述:		把Rm、Rn两个32位数通过一定方式交叉拼接为一个64位的位串，详细说明见指令集20130904。

	参数:		p_u32SrcM -- 32位输入，对应Rm。
					p_u32SrcN -- 32位输入，对应Rn。
					p_u32F -- 对应f。
					p_u32G -- 对应g。
					p_Dest -- 64位输出，低32位对应Rs1, 高32位对应Rs2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void InsertReg(DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 p_u32F, DSPU32 p_u32G, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		ExtReg

	对应指令形式:  Rs1Rs2=Rm Ext Rn (f:g)

	描述:		先把Rm与Rn组成一个位串，Rm位于低32位，Rn位于高32位，详细说明见指令集20130904。

	参数:		p_u32SrcM -- 32位输入，对应Rm。
					p_u32SrcN -- 32位输入，对应Rn。
					p_u32F -- 对应f。
					p_u32G -- 对应g。
					p_Dest -- 64位输出，低32位对应Rs1, 高32位对应Rs2。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：	

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void ExtReg(DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 p_u32F, DSPU32 p_u32G, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

//----------------------------------------------------------------------------------------------
/*found*****************************************************************
	函数名：		Flo64ToFix64

	指令形式：Rs1s2=FIX DFRm+1:m
						Rs1s2=FIX(DFRm+1:m,C)

	描述:			将64位浮点数据转变为64位定点数据。

	参数:		p_u32SrcLow -- 64位浮点数的低32位，对应Rm。
					p_u32SrcHigh -- 64位浮点数的高32位，对应Rm+1。
					p_u32Adjust -- 有符号数,对应指令中的C。
					p_Dest -- 64位输出，低32位对应Rs1存放转换后64位定点数的低32位, 高32位对应Rs2存放转换后64位定点数的高32位。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		64位定点结果。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern void Flo64ToFix64(DSPU32 p_u32SrcLow, DSPU32 p_u32SrcHigh, DSPU32 p_u32Adjust, DSP_BIT64 &p_Dest, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		Fix64ToFlo64

	指令形式：DFRs+1:s=Double RmRn
            DFRs+1:s=Double(RmRn,C)

	描述:			将64位定点数据转变为64位浮点数据。

	参数:		p_u32Rm -- 对应Rm, 放64位定点数的低32位。
	        p_u32Rn -- 对应Rn, 放64位定点数的高32位。
					p_u32DestLow -- 64位浮点数的低32位，对应Rs。
					p_u32DestHigh -- 64位浮点数的高32位，对应Rs+1。
					p_u32Adjust -- 有符号数,对应指令中的C。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		无。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern void Fix64ToFlo64(DSPU32 p_u32Rm, DSPU32 p_u32Rn, DSPU32 &p_u32DestHigh, DSPU32 &p_u32DestLow, DSPU32 p_u32Adjust, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);


/*found*****************************************************************
	函数名：		UnsignFix32ToFlo32

	指令形式： FRs=Float Rm(U)

	描述:			将32位无符号定点数据转变为32位浮点数据,无参数，不需要对浮点指数进行调整。

	参数:		p_u32Rm -- 对应Rm。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。	
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		无。

	注意事项:		1. 根据计算结果设置标志寄存器中属于SHF的标志位。

	修改记录
--------------------------------------
	日期			作者			修改处

*******************************************************************/
extern DSPU32 UnsignFix32ToFlo32(DSPU32 p_u32Rm, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		LrShift32

	描述:			32位逻辑移位：将寄存器Rm操作数逻辑移位（右移时不扩展符号位）

	参数:			p_u32Src -- 待移位定点数。
					p_u32BitToShift -- 移动位数，有符号数的补码形式，
									   正的表示右移，负的表示左移。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 LrShift32(DSPU32 p_u32Src, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR); 

/******************************************************************
	函数名：		Rrot32

	描述:			循环移位：将寄存器Rm操作数循环移位

	参数:			p_u32Src -- 待移位定点数。
					p_u32BitToShift -- 移动位数，有符号数的补码形式，
									   正的表示右移，负的表示左移
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 Rrot32(DSPU32 p_u32Src, DSPU32 p_u32BitToShift, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/******************************************************************
	函数名：		Expand16To32

	指令形式：      Rs+1:s= EXPAND(HRm,Rn)(U)

	描述:			将Rm寄存器的高低16位无符号数扩展为32位无符号数，详细说明见指令集20141211。

	参数:		p_Res -- 64位结果寄存器，高32位放Rs+1，低32位放Rs。	
					p_u32Src -- 待扩展16位定点复数。
					p_u32Pos -- 表示待扩展的16位数据在32位目的寄存器Rs中所处的位置，
								数据大于16则按照16处理。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位；
					是否做符号位扩展由p_u32SHFCR决定。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void Expand16To32(DSP_BIT64 &p_Res, DSPU32 p_u32Src, DSPU32 p_u32Pos, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SACCAddReg32

	对应指令形式:  SACCs+=Rm(Rn)

	描述:			将Rm中第Rn[4:0]位与SACC进行累加，并将结果存于SACC寄存器。

	参数:		p_SACC -- 64位SACC寄存器。
					p_u32SrcM -- 源操作数Rm。
					p_u32SrcN -- 源操作数Rn。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SACCAddReg32(DSP_BIT64 &p_SACC, DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SACCAddReg16

	对应指令形式:  HSACCs+=HRm(Rn)

	描述:			将Rm中高低16位的第Rn[3:0]位与SACC的高低32位分别进行累加，并将结果存于SACC寄存器。

	参数:		p_SACC -- 64位SACC寄存器。
					p_u32SrcM -- 源操作数Rm。
					p_u32SrcN -- 源操作数Rn。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SACCAddReg16(DSP_BIT64 &p_SACC, DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		SACCAddReg8

	对应指令形式:  OSACCs+=ORm(Rn)

	描述:			将Rm中4个8位数的第Rn[2:0]位与SACC的4个16位数分别进行累加，并将结果存于SACC寄存器。

	参数:		p_SACC -- 64位SACC寄存器。
					p_u32SrcM -- 源操作数Rm。
					p_u32SrcN -- 源操作数Rn。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern void SACCAddReg8(DSP_BIT64 &p_SACC, DSPU32 p_u32SrcM, DSPU32 p_u32SrcN, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		STabAddReg

	对应指令形式:  HSTABn(LORs) +=HRm(U,k)	HSTABn(EHRs) +=HRm(U,k)
					HSTABn(LORs) += C(U,k)
					HSTABn(EHRs) += C(U,k)

	描述:			将Rm中4个8位数的第Rn[2:0]位与SACC的4个16位数分别进行累加，并将结果存于SACC寄存器。

	参数:		    p_u32Mode -- 模式控制 =0 对应HSTABn(LORs) +=HRm(U,k)	HSTABn(EHRs) +=HRm(U,k)，此时p_u32Imm无效
	                             模式控制 =1 对应HSTABn(LORs) += C(U,k)	HSTABn(EHRs) += C(U,k)，此时p_u32SrcM无效
					p_u32TabValue -- p_u32Mode = 0时，利用Rs的[15:8]和[7:0]位寻址高16位和低16位，分别取出第n（n可以取0、1、2、3）块STAB中的两个16位数。
							         p_u32Mode = 1时，利用Rs的[24:16]和[8:0]位寻址高16位和低16位，分别取出第n（n只可以取0、1）块STAB中的两个16位数。
					p_u32SrcM -- 源操作数Rm。
					p_u32Imm -- 立即数C。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 STabAddReg(DSPU32 u32TabValue, DSPU32 p_u32SrcM, DSPU32 p_u32Imm, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR, DSPU32 p_u32Mode);

/*found*****************************************************************
	函数名：		STabRdAddrSet

	对应指令形式:  Rs = STABn(Rm)(k)

	描述:			Rm的[7:0]位为STAB寻址基值；
					Rm[23:16]位为下次寻址的修改值，该值为有符号数，该修改量累加至Rm[7:0]位，结果送回至Rm[7:0]，作为下次寻址的地址，Rm[31:8]保持不变；

					对地址进行递增运算时的饱和控制由SHFCR的饱和控制位决定。

	参数:		    
					p_u32SrcM -- 源操作数Rm。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 STabRdAddrSet(DSPU32 p_u32SrcM, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);

/*found*****************************************************************
	函数名：		STabRdWtAddrSet

	对应指令形式:  STABd(Rn,Rs,Rm)(k)

	描述:			Rn[7:0]存放读地址，Rn[15:8]存放写地址。

					Rn[31:24]存放写地址修改量，Rn[23:16]存放读地址修改量，都为有符号数。
					在对STAB进行访问后进行地址的修改，本指令把Rn[7:0]与Rn[23:16]相加，结果存入Rn[7:0]；
					把Rn[15:8]与Rn[31:24]相加，结果存入Rn[15:8]，Rn的其他位保持不变。

					地址修改运算过程受SHFCR的饱和控制位控制。

	参数:		    
					p_u32SrcN -- 源操作数Rn。
					p_pStatReg -- 指向标志寄存器输出缓存的指针，所指内存区域初始为0。
					p_u32SHFCR -- 移位器控制寄存器。

	返回值：		

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
extern DSPU32 STabRdWtAddrSet(DSPU32 p_u32SrcN, DSPU32 *p_pStatReg, DSPU32 p_u32SHFCR);
#endif	//Unit_CSHIFTER_H

