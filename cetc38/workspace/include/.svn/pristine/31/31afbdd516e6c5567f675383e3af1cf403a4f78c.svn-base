/*************************************************
  Copyright (C), 
  File name:      IMA.h
  Author:       Version: 
                Date: 
  Description:    // 用于详细说明此程序文件完成的主要功能，与其他模块
                  // 或函数的接口，输出值、取值范围、含义及参数间的控
                  // 制、顺序、独立或依赖等关系
  Others:         // 其它内容的说明
  Function List:  // 主要函数列表，每条记录应包括函数名及功能简要说明
    1. ....
  History:        // 修改历史记录列表，每条修改记录应包括修改日期、修改
                  // 者及修改内容简述  
    1. Date:	2013-07-19
       Author:	zhaoxiang
       Modification:  新增Sigma32(), SigmaD16(), SigmaD32(), SigmaQ16()

    2. Date:	2015-06-8
	   Author:	zhaoxiang
	   Modification:  新增SigmaAddQ16()
******************************************************************/
/*found*****************************************************************
	函数名：		Sigma32

	对应指令形式:  	xRs=sigma{x,y,z,t}Rm(U)
									xRs=sigma{x,y,z,t}Rm

	描述:		宏间数据相加。将{x,y,z,t}Rm中的32位定点有符号数分别相加后送到x宏的Rs寄存器上。  
					详见指令集20130702版。    

	参数:		xRm -- 来自x宏的32位定点数，对应指令中的xRm。
					yRm -- 来自y宏的32位定点数，对应指令中的yRm。
					zRm -- 来自z宏的32位定点数，对应指令中的zRm。
					tRm -- 来自t宏的32位定点数，对应指令中的tRm。
					p_pStatReg -- 指向标志寄存器IMAFR输出缓存的指针，所指内存区域初始为0。
					p_IMACR -- 宏外加法器控制寄存器。用IMACR寄存器的第0位来表示有/无符号数。
										 第0位为1表示Rm为有符号数。
										 第0位为0表示Rm为无符号数。

	返回值：		返回计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
DSPU32 Sigma32(DSPU32 xRm, DSPU32 yRm, DSPU32 zRm, DSPU32 tRm, DSPU32 *p_pStatReg, DSPU32 p_IMACR);

/*found*****************************************************************
	函数名：		SigmaD16

	对应指令形式:  	xHRs=sigma{x,y,z,t}HRm(U)
									xHRs=sigma{x,y,z,t}HRm

	描述:		宏间数据相加。将{x,y,z,t}Rm中的双16位定点有符号数分别相加后送到x宏的Rs寄存器上。  
					详见指令集20130702版。    

	参数:		xRm -- 来自x宏的32位数，对应指令中的xRm。
					yRm -- 来自y宏的32位数，对应指令中的yRm。
					zRm -- 来自z宏的32位数，对应指令中的zRm。
					tRm -- 来自t宏的32位数，对应指令中的tRm。
					p_pStatReg -- 指向标志寄存器IMAFR输出缓存的指针，所指内存区域初始为0。
					p_IMACR -- 宏外加法器控制寄存器。用IMACR寄存器的第0位来表示有/无符号数。
										 第0位为1表示Rm为有符号数。
										 第0位为0表示Rm为无符号数。

	返回值：		返回计算结果。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
DSPU32 SigmaD16(DSPU32 xRm, DSPU32 yRm, DSPU32 zRm, DSPU32 tRm, DSPU32 *p_pStatReg, DSPU32 p_IMACR);

/*found*****************************************************************
	函数名：		SigmaD32

	对应指令形式:  	xRs+1:s=sigma{x,y,z,t}Rm+1:m(U)
									xRs+1:s=sigma{x,y,z,t}Rm+1:m

	描述:		宏间数据相加。将{x,y,z,t}Rm+1:m中的两个32位定点有符号数分别相加后送到x宏的Rs+1:s寄存器上。  
					详见指令集20130702版。    

	参数:		xSrc -- 来自x宏的2个32位数，对应指令中的xRm+1:m，其中xSrc的高32位放Rm+1，低32位放Rm。
					ySrc -- 来自y宏的2个32位数，对应指令中的yRm+1:m，其中ySrc的高32位放Rm+1，低32位放Rm。
					zSrc -- 来自z宏的2个32位数，对应指令中的zRm+1:m，其中zSrc的高32位放Rm+1，低32位放Rm。
					tSrc -- 来自t宏的2个32位数，对应指令中的tRm+1:m，其中tSrc的高32位放Rm+1，低32位放Rm。
					Res -- 计算结果，对应指令中的Rs+1:s，其中Res的高32位放Rs+1，低32位放Rs。
					p_pStatReg -- 指向标志寄存器IMAFR输出缓存的指针，所指内存区域初始为0。
					p_IMACR -- 宏外加法器控制寄存器。用IMACR寄存器的第0位来表示有/无符号数。
										 第0位为1表示Rm为有符号数。
										 第0位为0表示Rm为无符号数。

	返回值：		无。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
void SigmaD32(DSP_BIT64 xSrc, DSP_BIT64 ySrc, DSP_BIT64 zSrc, DSP_BIT64 tSrc, DSP_BIT64 &Res, DSPU32 *p_pStatReg, DSPU32 p_IMACR);

/*found*****************************************************************
	函数名：		SigmaQ16

	对应指令形式:  	xHRs+1:s=sigma{x,y,z,t}HRm+1:m(U)
									xHRs+1:s=sigma{x,y,z,t}HRm+1:m

	描述:		宏间数据相加。将{x,y,z,t}Rm+1:m中的双16位定点有符号数分别相加后送到x宏的Rs+1:s寄存器上。
					详见指令集20130702版。    

	参数:		xSrc -- 来自x宏的2个32位数，对应指令中的xRm+1:m，其中xSrc的高32位放Rm+1，低32位放Rm。
					ySrc -- 来自y宏的2个32位数，对应指令中的yRm+1:m，其中ySrc的高32位放Rm+1，低32位放Rm。
					zSrc -- 来自z宏的2个32位数，对应指令中的zRm+1:m，其中zSrc的高32位放Rm+1，低32位放Rm。
					tSrc -- 来自t宏的2个32位数，对应指令中的tRm+1:m，其中tSrc的高32位放Rm+1，低32位放Rm。
					Res -- 计算结果，对应指令中的Rs+1:s，其中Res的高32位放Rs+1，低32位放Rs。
					p_pStatReg -- 指向标志寄存器IMAFR输出缓存的指针，所指内存区域初始为0。
					p_IMACR -- 宏外加法器控制寄存器。用IMACR寄存器的第0位来表示有/无符号数。
										 第0位为1表示Rm为有符号数。
										 第0位为0表示Rm为无符号数。

	返回值：		无。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
void SigmaQ16(DSP_BIT64 xSrc, DSP_BIT64 ySrc, DSP_BIT64 zSrc, DSP_BIT64 tSrc, DSP_BIT64 &Res, DSPU32 *p_pStatReg, DSPU32 p_IMACR);


/*found*****************************************************************
	函数名：		SigmaAddQ16

	对应指令形式:  	{x|y|z|t} HRs+1:s=sigma {x,y,z,t} HRm+1:m  ({+/-,+/-,+/-,+/-})
									

	描述:		将4个宏中的Rm+1:m中的高低4个16位数分别做有符号累加或累减，结果存入指定宏中的Rs+1:s的对应高低4个16位数中。   

	参数:		xSrc -- 来自x宏的2个32位数，对应指令中的xRm+1:m，其中xSrc的高32位放Rm+1，低32位放Rm。
					ySrc -- 来自y宏的2个32位数，对应指令中的yRm+1:m，其中ySrc的高32位放Rm+1，低32位放Rm。
					zSrc -- 来自z宏的2个32位数，对应指令中的zRm+1:m，其中zSrc的高32位放Rm+1，低32位放Rm。
					tSrc -- 来自t宏的2个32位数，对应指令中的tRm+1:m，其中tSrc的高32位放Rm+1，低32位放Rm。
					Res -- 计算结果，对应指令中的Rs+1:s，其中Res的高32位放Rs+1，低32位放Rs。
					p_pStatReg -- 指向标志寄存器IMAFR输出缓存的指针，所指内存区域初始为0。
					p_IMACR -- 宏外加法器控制寄存器。用IMACR寄存器的第0位来表示有/无符号数。
										 第0位为1表示Rm为有符号数。
										 第0位为0表示Rm为无符号数。
				    p_ADDCR -- 控制每个宏的数据进行累加还是累减。取1为累减，指令形式上对应宏前为“-”号；取0为累加，指令形式上对应宏前为“+”号；
					           有效位低4位，第[0]位控制x宏，第[1]位控制y宏，第[2]位控制z宏，第[3]位控制t宏。

	返回值：		无。

	注意事项:		根据计算结果设置相关标志位。

	修改记录
	--------------------------------------
	日期			作者			修改处
	
*******************************************************************/
void SigmaAddQ16(DSP_BIT64 xSrc, DSP_BIT64 ySrc, DSP_BIT64 zSrc, DSP_BIT64 tSrc, DSP_BIT64 &Res, DSPU32 *p_pStatReg, DSPU32 p_IMACR, DSPU32 p_ADDCR);