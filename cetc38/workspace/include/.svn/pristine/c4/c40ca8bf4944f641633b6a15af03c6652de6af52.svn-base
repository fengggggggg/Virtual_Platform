/*
 *pmem.cpp
 *
 *Created on: Jun 5, 2014
 *Author:	liugu
*/
#include "pmem.h"
#include "icache_memory.h"

pmem::pmem(sc_module_name module_name)
	:name(module_name),
	#ifdef USING_PEQ_WITH_CB_AND_PHASE
	m_peq(this, &pmem::peq_cb_send_RESP),
	#endif
	pmem_low_address(PMEM_DEFAULT_LOW_ADDRESS),
	pmem_size(PMEM_DEFAULT_SIZE)
{
	/*Variable initializing*/
	/*Sockets binding*/
	target_socket_from_mmac.bind(*this);

	/*Clock tick function initializing*/
	SC_METHOD(clock_tick);
	sensitive<<clk.pos();
	dont_initialize();

	/*Allocate space for memory*/
	try{
		memory = new unsigned int[pmem_size];
	}catch(std::bad_alloc err){
		DEBUG_out<< "ERROR "<<err.what()<<": Bad alloction for PMEM buffer" << endl;
	}
}

pmem::~pmem()
{
	/*Free memory space*/
	delete memory;
}

void pmem::setStartPC(unsigned int p_StartPC)
{
	pmem_low_address = p_StartPC;
}

void pmem::reset()
{
	memset(memory,0x0,pmem_size*sizeof(unsigned int));
}

/*receive payloads from mmac*/
tlm_sync_enum pmem::nb_transport_fw(
	tlm_generic_payload &trans,
	tlm_phase &phase,
	sc_time &t){
	/*TODO:TBD*/

	if(phase == BEGIN_REQ_CACHE_LINE){
		//Modify phase to END_REQ_CACHE_LINE
		phase = END_REQ_CACHE_LINE;
	
		//Setting delay time for response and insert to peq
		sc_time delay_time(30,SC_NS);
		#ifdef USING_PEQ_WITH_CB_AND_PHASE
		m_peq.notify(trans,phase,delay_time+t);
		#else
		request_item * new_request = new request_item(&trans,phase,delay_time+t);
		v_request.push_back(*new_request);
		delete new_request;
		#endif
		return TLM_UPDATED;	
	}
	return TLM_ACCEPTED;
}

/*Clock main function*/
void pmem::clock_tick(){
	//cout<<"["<<sc_time_stamp()<<"]"<<"PMEM "<<name<<": clock_tick"<<endl;
	#ifndef USING_PEQ_WITH_CB_AND_PHASE	
	/*TODO:TBD*/
	vector<request_item>::iterator it;
	vector<request_item>::iterator begin = v_request.begin();
//	vector<request_item>::iterator end = v_request.end();

	//Traval through the request queue
	for(it = begin; it != v_request.end(); ){
		if(it->delay_timer == SC_ZERO_TIME){//Dequeue and send response
			send_RESP(*(it->p_trans), it->phase);
			it = v_request.erase(it);
		}else{
			sc_time a_cycle_time(10,SC_NS);
			it->delay_timer -= a_cycle_time;
			it ++;
		}
	}



	#endif
	return;
}

#ifdef USING_PEQ_WITH_CB_AND_PHASE
/*PEQ Call back function for sending BEGIN_RESP_CACHE_LINE*/
void pmem::peq_cb_send_RESP(tlm::tlm_generic_payload &trans,const tlm::tlm_phase &phase)
{
	bool outofrange= false;
	tlm_sync_enum status = TLM_COMPLETED;

	if(phase == END_REQ_CACHE_LINE){
		tlm_command command = trans.get_command();
		if(command == TLM_READ_COMMAND){
			//A read command
			//Process address first
			unsigned int addr = (unsigned int)trans.get_address();
			if((addr < pmem_low_address) || (addr > (pmem_low_address + pmem_size))){
				//DEBUG_out<<"ERROR: access pmem address 0x"<<addr<<" out of range"<<endl;			
				//return;
				outofrange = true;
			}
			if(addr % 0x10 !=0){
				//Align address to 16
				//DEBUG_out<<"Warning: cache line addr 0x"<<hex<<addr<<" is auto aligned to 16: 0x"<<(addr - (addr%16))<<endl;
				addr = addr - (addr % 0x10);
			}
			
			BWDSP104X::insnLine512 *data = (BWDSP104X::insnLine512 *)trans.get_data_ptr();
			if(outofrange){
				for(int i=0;i<16;i++){
					//Read cache line from memory
						data->insnSlot[i] = 0;//memory[addr+i-pmem_low_address];
				}
			}else{
				for(int i=0;i<16;i++){
					//Read cache line from memory
						data->insnSlot[i] = memory[addr+i-pmem_low_address];
				}
			}
			trans.set_response_status(TLM_OK_RESPONSE);

			tlm_phase phase_new = BEGIN_RESP_CACHE_LINE;
			sc_time delay = SC_ZERO_TIME;

			status = target_socket_from_mmac->nb_transport_bw(trans,phase_new,delay);

			//DEBUG_out<<"Send a RESPONSE for addr = 0x"<<hex<<trans.get_address()<<endl;
			
			switch(status){
				case TLM_COMPLETED:
					{
						return;
						break;
					}
				case TLM_ACCEPTED:
				case TLM_UPDATED:
				default:
					{
						break;
					}
			}
			
		}else{
			//DEBUG_out<<"Transaction command "<<command<<" ignored"<<endl;
			return;
		}
	}
	
	return;
}
#else 
void pmem::send_RESP(tlm::tlm_generic_payload &trans, const tlm::tlm_phase &phase)
{
	//Same as peq_cb_send_RESP()
	bool outofrange= false;
	tlm_sync_enum status = TLM_COMPLETED;

	if(phase == END_REQ_CACHE_LINE){
		tlm_command command = trans.get_command();
		if(command == TLM_READ_COMMAND){
			//A read command
			//Process address first
			unsigned int addr = (unsigned int)trans.get_address();
			addr = addr ;//& 0x3fffff;
			if((addr < pmem_low_address) || (addr > (pmem_low_address + pmem_size))){
				//DEBUG_out<<"ERROR: access pmem address 0x"<<addr<<" out of range"<<endl;
				//return;
				outofrange = true;
			}
			if(addr % 0x10 !=0){
				//Align address to 16
				//DEBUG_out<<"Warning: cache line addr 0x"<<hex<<addr<<" is auto aligned to 16: 0x"<<(addr - (addr%16))<<endl;
				addr = addr - (addr % 0x10);
			}
			
			BWDSP104X::insnLine512 *data = (BWDSP104X::insnLine512 *)trans.get_data_ptr();
			if(outofrange){
				for(int i=0;i<16;i++){
					//Read cache line from memory
						data->insnSlot[i] = 0;//memory[addr+i-pmem_low_address];
				}
			}else{
				for(int i=0;i<16;i++){
					//Read cache line from memory
						data->insnSlot[i] = memory[addr+i-pmem_low_address];
				}
			}
			
			trans.set_response_status(TLM_OK_RESPONSE);

			tlm_phase phase_new = BEGIN_RESP_CACHE_LINE;
			sc_time delay = SC_ZERO_TIME;

			status = target_socket_from_mmac->nb_transport_bw(trans,phase_new,delay);

			//DEBUG_out<<"Send a RESPONSE for addr = 0x"<<hex<<trans.get_address()<<endl;
			
			switch(status){
				case TLM_COMPLETED:
					{
						return;
						break;
					}
				case TLM_ACCEPTED:
				case TLM_UPDATED:
				default:
					{
						break;
					}
			}
			
		}else{
			//DEBUG_out<<"Transaction command "<<command<<" ignored"<<endl;
			return;
		}
	}
	
	return;

}
#endif

/*JTAG Interface*/
bool pmem::read_word(unsigned int addr,unsigned int &value)
{
	bool ret = false;
	//Check for address
	if((addr < pmem_low_address)||(addr>(pmem_low_address + pmem_size))){
		DEBUG_out<<"ERROR: access pmem address 0x"<<addr<<" out of range"<<endl;
		return false;
	}
	value = memory[addr-pmem_low_address];
	return true;
}

bool pmem::write_word(unsigned int addr,const unsigned int value)
{
	bool ret = false;
	//Check for address
	if((addr < pmem_low_address)||(addr>(pmem_low_address + pmem_size))){
		DEBUG_out<<"ERROR: access pmem address 0x"<<addr<<" out of range"<<endl;
		return false;
	}
	memory[addr-pmem_low_address] = value;
	return true;
}

